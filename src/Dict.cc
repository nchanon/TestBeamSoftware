//
// File generated by rootcint at Thu Nov  3 18:51:34 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME Dict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "Dict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void tbeamcLcLcluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_tbeamcLcLcluster(void *p = 0);
   static void *newArray_tbeamcLcLcluster(Long_t size, void *p);
   static void delete_tbeamcLcLcluster(void *p);
   static void deleteArray_tbeamcLcLcluster(void *p);
   static void destruct_tbeamcLcLcluster(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::tbeam::cluster*)
   {
      ::tbeam::cluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::tbeam::cluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("tbeam::cluster", ::tbeam::cluster::Class_Version(), "./interface/DataFormats.h", 24,
                  typeid(::tbeam::cluster), DefineBehavior(ptr, ptr),
                  &::tbeam::cluster::Dictionary, isa_proxy, 4,
                  sizeof(::tbeam::cluster) );
      instance.SetNew(&new_tbeamcLcLcluster);
      instance.SetNewArray(&newArray_tbeamcLcLcluster);
      instance.SetDelete(&delete_tbeamcLcLcluster);
      instance.SetDeleteArray(&deleteArray_tbeamcLcLcluster);
      instance.SetDestructor(&destruct_tbeamcLcLcluster);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::tbeam::cluster*)
   {
      return GenerateInitInstanceLocal((::tbeam::cluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::tbeam::cluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void tbeamcLcLstub_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_tbeamcLcLstub(void *p = 0);
   static void *newArray_tbeamcLcLstub(Long_t size, void *p);
   static void delete_tbeamcLcLstub(void *p);
   static void deleteArray_tbeamcLcLstub(void *p);
   static void destruct_tbeamcLcLstub(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::tbeam::stub*)
   {
      ::tbeam::stub *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::tbeam::stub >(0);
      static ::ROOT::TGenericClassInfo 
         instance("tbeam::stub", ::tbeam::stub::Class_Version(), "./interface/DataFormats.h", 33,
                  typeid(::tbeam::stub), DefineBehavior(ptr, ptr),
                  &::tbeam::stub::Dictionary, isa_proxy, 4,
                  sizeof(::tbeam::stub) );
      instance.SetNew(&new_tbeamcLcLstub);
      instance.SetNewArray(&newArray_tbeamcLcLstub);
      instance.SetDelete(&delete_tbeamcLcLstub);
      instance.SetDeleteArray(&deleteArray_tbeamcLcLstub);
      instance.SetDestructor(&destruct_tbeamcLcLstub);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::tbeam::stub*)
   {
      return GenerateInitInstanceLocal((::tbeam::stub*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::tbeam::stub*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void tbeamcLcLcbc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_tbeamcLcLcbc(void *p = 0);
   static void *newArray_tbeamcLcLcbc(Long_t size, void *p);
   static void delete_tbeamcLcLcbc(void *p);
   static void deleteArray_tbeamcLcLcbc(void *p);
   static void destruct_tbeamcLcLcbc(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::tbeam::cbc*)
   {
      ::tbeam::cbc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::tbeam::cbc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("tbeam::cbc", ::tbeam::cbc::Class_Version(), "./interface/DataFormats.h", 43,
                  typeid(::tbeam::cbc), DefineBehavior(ptr, ptr),
                  &::tbeam::cbc::Dictionary, isa_proxy, 4,
                  sizeof(::tbeam::cbc) );
      instance.SetNew(&new_tbeamcLcLcbc);
      instance.SetNewArray(&newArray_tbeamcLcLcbc);
      instance.SetDelete(&delete_tbeamcLcLcbc);
      instance.SetDeleteArray(&deleteArray_tbeamcLcLcbc);
      instance.SetDestructor(&destruct_tbeamcLcLcbc);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::tbeam::cbc*)
   {
      return GenerateInitInstanceLocal((::tbeam::cbc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::tbeam::cbc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void tbeamcLcLdutEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_tbeamcLcLdutEvent(void *p = 0);
   static void *newArray_tbeamcLcLdutEvent(Long_t size, void *p);
   static void delete_tbeamcLcLdutEvent(void *p);
   static void deleteArray_tbeamcLcLdutEvent(void *p);
   static void destruct_tbeamcLcLdutEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::tbeam::dutEvent*)
   {
      ::tbeam::dutEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::tbeam::dutEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("tbeam::dutEvent", ::tbeam::dutEvent::Class_Version(), "./interface/DataFormats.h", 52,
                  typeid(::tbeam::dutEvent), DefineBehavior(ptr, ptr),
                  &::tbeam::dutEvent::Dictionary, isa_proxy, 4,
                  sizeof(::tbeam::dutEvent) );
      instance.SetNew(&new_tbeamcLcLdutEvent);
      instance.SetNewArray(&newArray_tbeamcLcLdutEvent);
      instance.SetDelete(&delete_tbeamcLcLdutEvent);
      instance.SetDeleteArray(&deleteArray_tbeamcLcLdutEvent);
      instance.SetDestructor(&destruct_tbeamcLcLdutEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::tbeam::dutEvent*)
   {
      return GenerateInitInstanceLocal((::tbeam::dutEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::tbeam::dutEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void tbeamcLcLcondEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_tbeamcLcLcondEvent(void *p = 0);
   static void *newArray_tbeamcLcLcondEvent(Long_t size, void *p);
   static void delete_tbeamcLcLcondEvent(void *p);
   static void deleteArray_tbeamcLcLcondEvent(void *p);
   static void destruct_tbeamcLcLcondEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::tbeam::condEvent*)
   {
      ::tbeam::condEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::tbeam::condEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("tbeam::condEvent", ::tbeam::condEvent::Class_Version(), "./interface/DataFormats.h", 66,
                  typeid(::tbeam::condEvent), DefineBehavior(ptr, ptr),
                  &::tbeam::condEvent::Dictionary, isa_proxy, 4,
                  sizeof(::tbeam::condEvent) );
      instance.SetNew(&new_tbeamcLcLcondEvent);
      instance.SetNewArray(&newArray_tbeamcLcLcondEvent);
      instance.SetDelete(&delete_tbeamcLcLcondEvent);
      instance.SetDeleteArray(&deleteArray_tbeamcLcLcondEvent);
      instance.SetDestructor(&destruct_tbeamcLcLcondEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::tbeam::condEvent*)
   {
      return GenerateInitInstanceLocal((::tbeam::condEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::tbeam::condEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void tbeamcLcLTelescopeEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_tbeamcLcLTelescopeEvent(void *p = 0);
   static void *newArray_tbeamcLcLTelescopeEvent(Long_t size, void *p);
   static void delete_tbeamcLcLTelescopeEvent(void *p);
   static void deleteArray_tbeamcLcLTelescopeEvent(void *p);
   static void destruct_tbeamcLcLTelescopeEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::tbeam::TelescopeEvent*)
   {
      ::tbeam::TelescopeEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::tbeam::TelescopeEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("tbeam::TelescopeEvent", ::tbeam::TelescopeEvent::Class_Version(), "./interface/DataFormats.h", 91,
                  typeid(::tbeam::TelescopeEvent), DefineBehavior(ptr, ptr),
                  &::tbeam::TelescopeEvent::Dictionary, isa_proxy, 4,
                  sizeof(::tbeam::TelescopeEvent) );
      instance.SetNew(&new_tbeamcLcLTelescopeEvent);
      instance.SetNewArray(&newArray_tbeamcLcLTelescopeEvent);
      instance.SetDelete(&delete_tbeamcLcLTelescopeEvent);
      instance.SetDeleteArray(&deleteArray_tbeamcLcLTelescopeEvent);
      instance.SetDestructor(&destruct_tbeamcLcLTelescopeEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::tbeam::TelescopeEvent*)
   {
      return GenerateInitInstanceLocal((::tbeam::TelescopeEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::tbeam::TelescopeEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void tbeamcLcLFeIFourEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_tbeamcLcLFeIFourEvent(void *p = 0);
   static void *newArray_tbeamcLcLFeIFourEvent(Long_t size, void *p);
   static void delete_tbeamcLcLFeIFourEvent(void *p);
   static void deleteArray_tbeamcLcLFeIFourEvent(void *p);
   static void destruct_tbeamcLcLFeIFourEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::tbeam::FeIFourEvent*)
   {
      ::tbeam::FeIFourEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::tbeam::FeIFourEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("tbeam::FeIFourEvent", ::tbeam::FeIFourEvent::Class_Version(), "./interface/DataFormats.h", 109,
                  typeid(::tbeam::FeIFourEvent), DefineBehavior(ptr, ptr),
                  &::tbeam::FeIFourEvent::Dictionary, isa_proxy, 4,
                  sizeof(::tbeam::FeIFourEvent) );
      instance.SetNew(&new_tbeamcLcLFeIFourEvent);
      instance.SetNewArray(&newArray_tbeamcLcLFeIFourEvent);
      instance.SetDelete(&delete_tbeamcLcLFeIFourEvent);
      instance.SetDeleteArray(&deleteArray_tbeamcLcLFeIFourEvent);
      instance.SetDestructor(&destruct_tbeamcLcLFeIFourEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::tbeam::FeIFourEvent*)
   {
      return GenerateInitInstanceLocal((::tbeam::FeIFourEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::tbeam::FeIFourEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void tbeamcLcLTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_tbeamcLcLTrack(void *p = 0);
   static void *newArray_tbeamcLcLTrack(Long_t size, void *p);
   static void delete_tbeamcLcLTrack(void *p);
   static void deleteArray_tbeamcLcLTrack(void *p);
   static void destruct_tbeamcLcLTrack(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::tbeam::Track*)
   {
      ::tbeam::Track *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::tbeam::Track >(0);
      static ::ROOT::TGenericClassInfo 
         instance("tbeam::Track", ::tbeam::Track::Class_Version(), "./interface/DataFormats.h", 126,
                  typeid(::tbeam::Track), DefineBehavior(ptr, ptr),
                  &::tbeam::Track::Dictionary, isa_proxy, 4,
                  sizeof(::tbeam::Track) );
      instance.SetNew(&new_tbeamcLcLTrack);
      instance.SetNewArray(&newArray_tbeamcLcLTrack);
      instance.SetDelete(&delete_tbeamcLcLTrack);
      instance.SetDeleteArray(&deleteArray_tbeamcLcLTrack);
      instance.SetDestructor(&destruct_tbeamcLcLTrack);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::tbeam::Track*)
   {
      return GenerateInitInstanceLocal((::tbeam::Track*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::tbeam::Track*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

      namespace tbeam {
//______________________________________________________________________________
atomic_TClass_ptr cluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *cluster::Class_Name()
{
   return "tbeam::cluster";
}

//______________________________________________________________________________
const char *cluster::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tbeam::cluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int cluster::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tbeam::cluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void cluster::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tbeam::cluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *cluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tbeam::cluster*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace tbeam
      namespace tbeam {
//______________________________________________________________________________
atomic_TClass_ptr stub::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *stub::Class_Name()
{
   return "tbeam::stub";
}

//______________________________________________________________________________
const char *stub::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tbeam::stub*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int stub::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tbeam::stub*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void stub::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tbeam::stub*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *stub::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tbeam::stub*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace tbeam
      namespace tbeam {
//______________________________________________________________________________
atomic_TClass_ptr cbc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *cbc::Class_Name()
{
   return "tbeam::cbc";
}

//______________________________________________________________________________
const char *cbc::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tbeam::cbc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int cbc::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tbeam::cbc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void cbc::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tbeam::cbc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *cbc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tbeam::cbc*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace tbeam
      namespace tbeam {
//______________________________________________________________________________
atomic_TClass_ptr dutEvent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *dutEvent::Class_Name()
{
   return "tbeam::dutEvent";
}

//______________________________________________________________________________
const char *dutEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tbeam::dutEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int dutEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tbeam::dutEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void dutEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tbeam::dutEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *dutEvent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tbeam::dutEvent*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace tbeam
      namespace tbeam {
//______________________________________________________________________________
atomic_TClass_ptr condEvent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *condEvent::Class_Name()
{
   return "tbeam::condEvent";
}

//______________________________________________________________________________
const char *condEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tbeam::condEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int condEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tbeam::condEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void condEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tbeam::condEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *condEvent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tbeam::condEvent*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace tbeam
      namespace tbeam {
//______________________________________________________________________________
atomic_TClass_ptr TelescopeEvent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *TelescopeEvent::Class_Name()
{
   return "tbeam::TelescopeEvent";
}

//______________________________________________________________________________
const char *TelescopeEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tbeam::TelescopeEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TelescopeEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tbeam::TelescopeEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TelescopeEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tbeam::TelescopeEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TelescopeEvent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tbeam::TelescopeEvent*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace tbeam
      namespace tbeam {
//______________________________________________________________________________
atomic_TClass_ptr FeIFourEvent::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *FeIFourEvent::Class_Name()
{
   return "tbeam::FeIFourEvent";
}

//______________________________________________________________________________
const char *FeIFourEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tbeam::FeIFourEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FeIFourEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tbeam::FeIFourEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FeIFourEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tbeam::FeIFourEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FeIFourEvent::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tbeam::FeIFourEvent*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace tbeam
      namespace tbeam {
//______________________________________________________________________________
atomic_TClass_ptr Track::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Track::Class_Name()
{
   return "tbeam::Track";
}

//______________________________________________________________________________
const char *Track::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tbeam::Track*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Track::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::tbeam::Track*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Track::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tbeam::Track*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Track::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::tbeam::Track*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace tbeam
      namespace tbeam {
//______________________________________________________________________________
void cluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class tbeam::cluster.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(tbeam::cluster::Class(),this);
   } else {
      R__b.WriteClassBuffer(tbeam::cluster::Class(),this);
   }
}

} // namespace tbeam
//______________________________________________________________________________
      namespace tbeam {
void cluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class tbeam::cluster.
      TClass *R__cl = ::tbeam::cluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size", &size);
      TObject::ShowMembers(R__insp);
}

} // namespace tbeam
namespace ROOT {
   // Wrappers around operator new
   static void *new_tbeamcLcLcluster(void *p) {
      return  p ? new(p) ::tbeam::cluster : new ::tbeam::cluster;
   }
   static void *newArray_tbeamcLcLcluster(Long_t nElements, void *p) {
      return p ? new(p) ::tbeam::cluster[nElements] : new ::tbeam::cluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_tbeamcLcLcluster(void *p) {
      delete ((::tbeam::cluster*)p);
   }
   static void deleteArray_tbeamcLcLcluster(void *p) {
      delete [] ((::tbeam::cluster*)p);
   }
   static void destruct_tbeamcLcLcluster(void *p) {
      typedef ::tbeam::cluster current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::tbeam::cluster

      namespace tbeam {
//______________________________________________________________________________
void cbc::Streamer(TBuffer &R__b)
{
   // Stream an object of class tbeam::cbc.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(tbeam::cbc::Class(),this);
   } else {
      R__b.WriteClassBuffer(tbeam::cbc::Class(),this);
   }
}

} // namespace tbeam
//______________________________________________________________________________
      namespace tbeam {
void cbc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class tbeam::cbc.
      TClass *R__cl = ::tbeam::cbc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pipelineAdd", &pipelineAdd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", &status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "error", &error);
      TObject::ShowMembers(R__insp);
}

} // namespace tbeam
namespace ROOT {
   // Wrappers around operator new
   static void *new_tbeamcLcLcbc(void *p) {
      return  p ? new(p) ::tbeam::cbc : new ::tbeam::cbc;
   }
   static void *newArray_tbeamcLcLcbc(Long_t nElements, void *p) {
      return p ? new(p) ::tbeam::cbc[nElements] : new ::tbeam::cbc[nElements];
   }
   // Wrapper around operator delete
   static void delete_tbeamcLcLcbc(void *p) {
      delete ((::tbeam::cbc*)p);
   }
   static void deleteArray_tbeamcLcLcbc(void *p) {
      delete [] ((::tbeam::cbc*)p);
   }
   static void destruct_tbeamcLcLcbc(void *p) {
      typedef ::tbeam::cbc current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::tbeam::cbc

      namespace tbeam {
//______________________________________________________________________________
void stub::Streamer(TBuffer &R__b)
{
   // Stream an object of class tbeam::stub.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(tbeam::stub::Class(),this);
   } else {
      R__b.WriteClassBuffer(tbeam::stub::Class(),this);
   }
}

} // namespace tbeam
//______________________________________________________________________________
      namespace tbeam {
void stub::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class tbeam::stub.
      TClass *R__cl = ::tbeam::stub::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*seeding", &seeding);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*matched", &matched);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "x", &x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "direction", &direction);
      TObject::ShowMembers(R__insp);
}

} // namespace tbeam
namespace ROOT {
   // Wrappers around operator new
   static void *new_tbeamcLcLstub(void *p) {
      return  p ? new(p) ::tbeam::stub : new ::tbeam::stub;
   }
   static void *newArray_tbeamcLcLstub(Long_t nElements, void *p) {
      return p ? new(p) ::tbeam::stub[nElements] : new ::tbeam::stub[nElements];
   }
   // Wrapper around operator delete
   static void delete_tbeamcLcLstub(void *p) {
      delete ((::tbeam::stub*)p);
   }
   static void deleteArray_tbeamcLcLstub(void *p) {
      delete [] ((::tbeam::stub*)p);
   }
   static void destruct_tbeamcLcLstub(void *p) {
      typedef ::tbeam::stub current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::tbeam::stub

      namespace tbeam {
//______________________________________________________________________________
void dutEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class tbeam::dutEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(tbeam::dutEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(tbeam::dutEvent::Class(),this);
   }
}

} // namespace tbeam
//______________________________________________________________________________
      namespace tbeam {
void dutEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class tbeam::dutEvent.
      TClass *R__cl = ::tbeam::dutEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusters", (void*)&clusters);
      R__insp.InspectMember("map<std::string,std::vector<tbeam::cluster*> >", (void*)&clusters, "clusters.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dut_channel", (void*)&dut_channel);
      R__insp.InspectMember("map<std::string,std::vector<int> >", (void*)&dut_channel, "dut_channel.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dut_row", (void*)&dut_row);
      R__insp.InspectMember("map<std::string,std::vector<int> >", (void*)&dut_row, "dut_row.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stubs", (void*)&stubs);
      R__insp.InspectMember("vector<tbeam::stub*>", (void*)&stubs, "stubs.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stubWord", &stubWord);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stubWordReco", &stubWordReco);
      TObject::ShowMembers(R__insp);
}

} // namespace tbeam
namespace ROOT {
   // Wrappers around operator new
   static void *new_tbeamcLcLdutEvent(void *p) {
      return  p ? new(p) ::tbeam::dutEvent : new ::tbeam::dutEvent;
   }
   static void *newArray_tbeamcLcLdutEvent(Long_t nElements, void *p) {
      return p ? new(p) ::tbeam::dutEvent[nElements] : new ::tbeam::dutEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_tbeamcLcLdutEvent(void *p) {
      delete ((::tbeam::dutEvent*)p);
   }
   static void deleteArray_tbeamcLcLdutEvent(void *p) {
      delete [] ((::tbeam::dutEvent*)p);
   }
   static void destruct_tbeamcLcLdutEvent(void *p) {
      typedef ::tbeam::dutEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::tbeam::dutEvent

      namespace tbeam {
//______________________________________________________________________________
void condEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class tbeam::condEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(tbeam::condEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(tbeam::condEvent::Class(),this);
   }
}

} // namespace tbeam
//______________________________________________________________________________
      namespace tbeam {
void condEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class tbeam::condEvent.
      TClass *R__cl = ::tbeam::condEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "run", &run);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lumiSection", &lumiSection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "event", &event);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "unixtime", &unixtime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdcPhase", &tdcPhase);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HVsettings", &HVsettings);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DUTangle", &DUTangle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "window", &window);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offset", &offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cwd", &cwd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tilt", &tilt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vcth", &vcth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stubLatency", &stubLatency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "triggerLatency", &triggerLatency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "condData", &condData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "glibStatus", &glibStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cbcs", (void*)&cbcs);
      R__insp.InspectMember("vector<tbeam::cbc>", (void*)&cbcs, "cbcs.", false);
      TObject::ShowMembers(R__insp);
}

} // namespace tbeam
namespace ROOT {
   // Wrappers around operator new
   static void *new_tbeamcLcLcondEvent(void *p) {
      return  p ? new(p) ::tbeam::condEvent : new ::tbeam::condEvent;
   }
   static void *newArray_tbeamcLcLcondEvent(Long_t nElements, void *p) {
      return p ? new(p) ::tbeam::condEvent[nElements] : new ::tbeam::condEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_tbeamcLcLcondEvent(void *p) {
      delete ((::tbeam::condEvent*)p);
   }
   static void deleteArray_tbeamcLcLcondEvent(void *p) {
      delete [] ((::tbeam::condEvent*)p);
   }
   static void destruct_tbeamcLcLcondEvent(void *p) {
      typedef ::tbeam::condEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::tbeam::condEvent

      namespace tbeam {
//______________________________________________________________________________
void FeIFourEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class tbeam::FeIFourEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(tbeam::FeIFourEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(tbeam::FeIFourEvent::Class(),this);
   }
}

} // namespace tbeam
//______________________________________________________________________________
      namespace tbeam {
void FeIFourEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class tbeam::FeIFourEvent.
      TClass *R__cl = ::tbeam::FeIFourEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPixHits", &nPixHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "euEvt", &euEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*col", &col);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*row", &row);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tot", &tot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lv1", &lv1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iden", &iden);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hitTime", &hitTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*frameTime", &frameTime);
      TObject::ShowMembers(R__insp);
}

} // namespace tbeam
namespace ROOT {
   // Wrappers around operator new
   static void *new_tbeamcLcLFeIFourEvent(void *p) {
      return  p ? new(p) ::tbeam::FeIFourEvent : new ::tbeam::FeIFourEvent;
   }
   static void *newArray_tbeamcLcLFeIFourEvent(Long_t nElements, void *p) {
      return p ? new(p) ::tbeam::FeIFourEvent[nElements] : new ::tbeam::FeIFourEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_tbeamcLcLFeIFourEvent(void *p) {
      delete ((::tbeam::FeIFourEvent*)p);
   }
   static void deleteArray_tbeamcLcLFeIFourEvent(void *p) {
      delete [] ((::tbeam::FeIFourEvent*)p);
   }
   static void destruct_tbeamcLcLFeIFourEvent(void *p) {
      typedef ::tbeam::FeIFourEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::tbeam::FeIFourEvent

      namespace tbeam {
//______________________________________________________________________________
void TelescopeEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class tbeam::TelescopeEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(tbeam::TelescopeEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(tbeam::TelescopeEvent::Class(),this);
   }
}

} // namespace tbeam
//______________________________________________________________________________
      namespace tbeam {
void TelescopeEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class tbeam::TelescopeEvent.
      TClass *R__cl = ::tbeam::TelescopeEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrackParams", &nTrackParams);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "euEvt", &euEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xPos", &xPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*yPos", &yPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*dxdz", &dxdz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*dydz", &dydz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*trackNum", &trackNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iden", &iden);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ndof", &ndof);
      TObject::ShowMembers(R__insp);
}

} // namespace tbeam
namespace ROOT {
   // Wrappers around operator new
   static void *new_tbeamcLcLTelescopeEvent(void *p) {
      return  p ? new(p) ::tbeam::TelescopeEvent : new ::tbeam::TelescopeEvent;
   }
   static void *newArray_tbeamcLcLTelescopeEvent(Long_t nElements, void *p) {
      return p ? new(p) ::tbeam::TelescopeEvent[nElements] : new ::tbeam::TelescopeEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_tbeamcLcLTelescopeEvent(void *p) {
      delete ((::tbeam::TelescopeEvent*)p);
   }
   static void deleteArray_tbeamcLcLTelescopeEvent(void *p) {
      delete [] ((::tbeam::TelescopeEvent*)p);
   }
   static void destruct_tbeamcLcLTelescopeEvent(void *p) {
      typedef ::tbeam::TelescopeEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::tbeam::TelescopeEvent

      namespace tbeam {
//______________________________________________________________________________
void Track::Streamer(TBuffer &R__b)
{
   // Stream an object of class tbeam::Track.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(tbeam::Track::Class(),this);
   } else {
      R__b.WriteClassBuffer(tbeam::Track::Class(),this);
   }
}

} // namespace tbeam
//______________________________________________________________________________
      namespace tbeam {
void Track::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class tbeam::Track.
      TClass *R__cl = ::tbeam::Track::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trkIndex", &trkIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xPos", &xPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yPos", &yPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dxdz", &dxdz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dydz", &dydz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chi2", &chi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndof", &ndof);
      TObject::ShowMembers(R__insp);
}

} // namespace tbeam
namespace ROOT {
   // Wrappers around operator new
   static void *new_tbeamcLcLTrack(void *p) {
      return  p ? new(p) ::tbeam::Track : new ::tbeam::Track;
   }
   static void *newArray_tbeamcLcLTrack(Long_t nElements, void *p) {
      return p ? new(p) ::tbeam::Track[nElements] : new ::tbeam::Track[nElements];
   }
   // Wrapper around operator delete
   static void delete_tbeamcLcLTrack(void *p) {
      delete ((::tbeam::Track*)p);
   }
   static void deleteArray_tbeamcLcLTrack(void *p) {
      delete [] ((::tbeam::Track*)p);
   }
   static void destruct_tbeamcLcLTrack(void *p) {
      typedef ::tbeam::Track current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::tbeam::Track

namespace ROOT {
   void maplEstringcOintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOintgR_Dictionary();
   static void *new_maplEstringcOintgR(void *p = 0);
   static void *newArray_maplEstringcOintgR(Long_t size, void *p);
   static void delete_maplEstringcOintgR(void *p);
   static void deleteArray_maplEstringcOintgR(void *p);
   static void destruct_maplEstringcOintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,int>*)
   {
      map<string,int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,int>", -2, "map.dll", 0,
                  typeid(map<string,int>), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOintgR_Dictionary, isa_proxy, 4,
                  sizeof(map<string,int>) );
      instance.SetNew(&new_maplEstringcOintgR);
      instance.SetNewArray(&newArray_maplEstringcOintgR);
      instance.SetDelete(&delete_maplEstringcOintgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOintgR);
      instance.SetDestructor(&destruct_maplEstringcOintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,int> : new map<string,int>;
   }
   static void *newArray_maplEstringcOintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,int>[nElements] : new map<string,int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOintgR(void *p) {
      delete ((map<string,int>*)p);
   }
   static void deleteArray_maplEstringcOintgR(void *p) {
      delete [] ((map<string,int>*)p);
   }
   static void destruct_maplEstringcOintgR(void *p) {
      typedef map<string,int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,int>

namespace ROOT {
   void maplEstringcOvectorlEdoublegRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOvectorlEdoublegRsPgR_Dictionary();
   static void *new_maplEstringcOvectorlEdoublegRsPgR(void *p = 0);
   static void *newArray_maplEstringcOvectorlEdoublegRsPgR(Long_t size, void *p);
   static void delete_maplEstringcOvectorlEdoublegRsPgR(void *p);
   static void deleteArray_maplEstringcOvectorlEdoublegRsPgR(void *p);
   static void destruct_maplEstringcOvectorlEdoublegRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,vector<double> >*)
   {
      map<string,vector<double> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,vector<double> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,vector<double> >", -2, "prec_stl/map", 63,
                  typeid(map<string,vector<double> >), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOvectorlEdoublegRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(map<string,vector<double> >) );
      instance.SetNew(&new_maplEstringcOvectorlEdoublegRsPgR);
      instance.SetNewArray(&newArray_maplEstringcOvectorlEdoublegRsPgR);
      instance.SetDelete(&delete_maplEstringcOvectorlEdoublegRsPgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOvectorlEdoublegRsPgR);
      instance.SetDestructor(&destruct_maplEstringcOvectorlEdoublegRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,vector<double> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,vector<double> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOvectorlEdoublegRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,vector<double> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOvectorlEdoublegRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<double> > : new map<string,vector<double> >;
   }
   static void *newArray_maplEstringcOvectorlEdoublegRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<double> >[nElements] : new map<string,vector<double> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOvectorlEdoublegRsPgR(void *p) {
      delete ((map<string,vector<double> >*)p);
   }
   static void deleteArray_maplEstringcOvectorlEdoublegRsPgR(void *p) {
      delete [] ((map<string,vector<double> >*)p);
   }
   static void destruct_maplEstringcOvectorlEdoublegRsPgR(void *p) {
      typedef map<string,vector<double> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,vector<double> >

namespace ROOT {
   void maplEstringcOvectorlEintgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOvectorlEintgRsPgR_Dictionary();
   static void *new_maplEstringcOvectorlEintgRsPgR(void *p = 0);
   static void *newArray_maplEstringcOvectorlEintgRsPgR(Long_t size, void *p);
   static void delete_maplEstringcOvectorlEintgRsPgR(void *p);
   static void deleteArray_maplEstringcOvectorlEintgRsPgR(void *p);
   static void destruct_maplEstringcOvectorlEintgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,vector<int> >*)
   {
      map<string,vector<int> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,vector<int> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,vector<int> >", -2, "prec_stl/map", 63,
                  typeid(map<string,vector<int> >), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOvectorlEintgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(map<string,vector<int> >) );
      instance.SetNew(&new_maplEstringcOvectorlEintgRsPgR);
      instance.SetNewArray(&newArray_maplEstringcOvectorlEintgRsPgR);
      instance.SetDelete(&delete_maplEstringcOvectorlEintgRsPgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOvectorlEintgRsPgR);
      instance.SetDestructor(&destruct_maplEstringcOvectorlEintgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,vector<int> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,vector<int> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOvectorlEintgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,vector<int> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOvectorlEintgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<int> > : new map<string,vector<int> >;
   }
   static void *newArray_maplEstringcOvectorlEintgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<int> >[nElements] : new map<string,vector<int> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOvectorlEintgRsPgR(void *p) {
      delete ((map<string,vector<int> >*)p);
   }
   static void deleteArray_maplEstringcOvectorlEintgRsPgR(void *p) {
      delete [] ((map<string,vector<int> >*)p);
   }
   static void destruct_maplEstringcOvectorlEintgRsPgR(void *p) {
      typedef map<string,vector<int> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,vector<int> >

namespace ROOT {
   void maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR_Dictionary();
   static void *new_maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR(void *p = 0);
   static void *newArray_maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR(Long_t size, void *p);
   static void delete_maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR(void *p);
   static void deleteArray_maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR(void *p);
   static void destruct_maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,vector<tbeam::cluster*> >*)
   {
      map<string,vector<tbeam::cluster*> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,vector<tbeam::cluster*> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,vector<tbeam::cluster*> >", -2, "prec_stl/map", 63,
                  typeid(map<string,vector<tbeam::cluster*> >), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(map<string,vector<tbeam::cluster*> >) );
      instance.SetNew(&new_maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR);
      instance.SetNewArray(&newArray_maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR);
      instance.SetDelete(&delete_maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR);
      instance.SetDestructor(&destruct_maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,vector<tbeam::cluster*> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,vector<tbeam::cluster*> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,vector<tbeam::cluster*> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<tbeam::cluster*> > : new map<string,vector<tbeam::cluster*> >;
   }
   static void *newArray_maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<tbeam::cluster*> >[nElements] : new map<string,vector<tbeam::cluster*> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR(void *p) {
      delete ((map<string,vector<tbeam::cluster*> >*)p);
   }
   static void deleteArray_maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR(void *p) {
      delete [] ((map<string,vector<tbeam::cluster*> >*)p);
   }
   static void destruct_maplEstringcOvectorlEtbeamcLcLclustermUgRsPgR(void *p) {
      typedef map<string,vector<tbeam::cluster*> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,vector<tbeam::cluster*> >

namespace ROOT {
   void maplEstringcOvectorlEtbeamcLcLclustergRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOvectorlEtbeamcLcLclustergRsPgR_Dictionary();
   static void *new_maplEstringcOvectorlEtbeamcLcLclustergRsPgR(void *p = 0);
   static void *newArray_maplEstringcOvectorlEtbeamcLcLclustergRsPgR(Long_t size, void *p);
   static void delete_maplEstringcOvectorlEtbeamcLcLclustergRsPgR(void *p);
   static void deleteArray_maplEstringcOvectorlEtbeamcLcLclustergRsPgR(void *p);
   static void destruct_maplEstringcOvectorlEtbeamcLcLclustergRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,vector<tbeam::cluster> >*)
   {
      map<string,vector<tbeam::cluster> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,vector<tbeam::cluster> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,vector<tbeam::cluster> >", -2, "prec_stl/map", 63,
                  typeid(map<string,vector<tbeam::cluster> >), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOvectorlEtbeamcLcLclustergRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(map<string,vector<tbeam::cluster> >) );
      instance.SetNew(&new_maplEstringcOvectorlEtbeamcLcLclustergRsPgR);
      instance.SetNewArray(&newArray_maplEstringcOvectorlEtbeamcLcLclustergRsPgR);
      instance.SetDelete(&delete_maplEstringcOvectorlEtbeamcLcLclustergRsPgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOvectorlEtbeamcLcLclustergRsPgR);
      instance.SetDestructor(&destruct_maplEstringcOvectorlEtbeamcLcLclustergRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,vector<tbeam::cluster> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,vector<tbeam::cluster> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOvectorlEtbeamcLcLclustergRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,vector<tbeam::cluster> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOvectorlEtbeamcLcLclustergRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<tbeam::cluster> > : new map<string,vector<tbeam::cluster> >;
   }
   static void *newArray_maplEstringcOvectorlEtbeamcLcLclustergRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<tbeam::cluster> >[nElements] : new map<string,vector<tbeam::cluster> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOvectorlEtbeamcLcLclustergRsPgR(void *p) {
      delete ((map<string,vector<tbeam::cluster> >*)p);
   }
   static void deleteArray_maplEstringcOvectorlEtbeamcLcLclustergRsPgR(void *p) {
      delete [] ((map<string,vector<tbeam::cluster> >*)p);
   }
   static void destruct_maplEstringcOvectorlEtbeamcLcLclustergRsPgR(void *p) {
      typedef map<string,vector<tbeam::cluster> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,vector<tbeam::cluster> >

namespace ROOT {
   void maplEstringcOvectorlEunsignedsPshortgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOvectorlEunsignedsPshortgRsPgR_Dictionary();
   static void *new_maplEstringcOvectorlEunsignedsPshortgRsPgR(void *p = 0);
   static void *newArray_maplEstringcOvectorlEunsignedsPshortgRsPgR(Long_t size, void *p);
   static void delete_maplEstringcOvectorlEunsignedsPshortgRsPgR(void *p);
   static void deleteArray_maplEstringcOvectorlEunsignedsPshortgRsPgR(void *p);
   static void destruct_maplEstringcOvectorlEunsignedsPshortgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<string,vector<unsigned short> >*)
   {
      map<string,vector<unsigned short> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,vector<unsigned short> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,vector<unsigned short> >", -2, "prec_stl/map", 63,
                  typeid(map<string,vector<unsigned short> >), DefineBehavior(ptr, ptr),
                  0, &maplEstringcOvectorlEunsignedsPshortgRsPgR_Dictionary, isa_proxy, 4,
                  sizeof(map<string,vector<unsigned short> >) );
      instance.SetNew(&new_maplEstringcOvectorlEunsignedsPshortgRsPgR);
      instance.SetNewArray(&newArray_maplEstringcOvectorlEunsignedsPshortgRsPgR);
      instance.SetDelete(&delete_maplEstringcOvectorlEunsignedsPshortgRsPgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOvectorlEunsignedsPshortgRsPgR);
      instance.SetDestructor(&destruct_maplEstringcOvectorlEunsignedsPshortgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<string,vector<unsigned short> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,vector<unsigned short> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOvectorlEunsignedsPshortgRsPgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<string,vector<unsigned short> >*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEstringcOvectorlEunsignedsPshortgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<unsigned short> > : new map<string,vector<unsigned short> >;
   }
   static void *newArray_maplEstringcOvectorlEunsignedsPshortgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,vector<unsigned short> >[nElements] : new map<string,vector<unsigned short> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOvectorlEunsignedsPshortgRsPgR(void *p) {
      delete ((map<string,vector<unsigned short> >*)p);
   }
   static void deleteArray_maplEstringcOvectorlEunsignedsPshortgRsPgR(void *p) {
      delete [] ((map<string,vector<unsigned short> >*)p);
   }
   static void destruct_maplEstringcOvectorlEunsignedsPshortgRsPgR(void *p) {
      typedef map<string,vector<unsigned short> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<string,vector<unsigned short> >

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

namespace ROOT {
   void vectorlEtbeamcLcLTrackgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEtbeamcLcLTrackgR_Dictionary();
   static void *new_vectorlEtbeamcLcLTrackgR(void *p = 0);
   static void *newArray_vectorlEtbeamcLcLTrackgR(Long_t size, void *p);
   static void delete_vectorlEtbeamcLcLTrackgR(void *p);
   static void deleteArray_vectorlEtbeamcLcLTrackgR(void *p);
   static void destruct_vectorlEtbeamcLcLTrackgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<tbeam::Track>*)
   {
      vector<tbeam::Track> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<tbeam::Track>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<tbeam::Track>", -2, "prec_stl/vector", 49,
                  typeid(vector<tbeam::Track>), DefineBehavior(ptr, ptr),
                  0, &vectorlEtbeamcLcLTrackgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<tbeam::Track>) );
      instance.SetNew(&new_vectorlEtbeamcLcLTrackgR);
      instance.SetNewArray(&newArray_vectorlEtbeamcLcLTrackgR);
      instance.SetDelete(&delete_vectorlEtbeamcLcLTrackgR);
      instance.SetDeleteArray(&deleteArray_vectorlEtbeamcLcLTrackgR);
      instance.SetDestructor(&destruct_vectorlEtbeamcLcLTrackgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<tbeam::Track> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<tbeam::Track>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEtbeamcLcLTrackgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<tbeam::Track>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEtbeamcLcLTrackgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<tbeam::Track> : new vector<tbeam::Track>;
   }
   static void *newArray_vectorlEtbeamcLcLTrackgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<tbeam::Track>[nElements] : new vector<tbeam::Track>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEtbeamcLcLTrackgR(void *p) {
      delete ((vector<tbeam::Track>*)p);
   }
   static void deleteArray_vectorlEtbeamcLcLTrackgR(void *p) {
      delete [] ((vector<tbeam::Track>*)p);
   }
   static void destruct_vectorlEtbeamcLcLTrackgR(void *p) {
      typedef vector<tbeam::Track> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<tbeam::Track>

namespace ROOT {
   void vectorlEtbeamcLcLclustermUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEtbeamcLcLclustermUgR_Dictionary();
   static void *new_vectorlEtbeamcLcLclustermUgR(void *p = 0);
   static void *newArray_vectorlEtbeamcLcLclustermUgR(Long_t size, void *p);
   static void delete_vectorlEtbeamcLcLclustermUgR(void *p);
   static void deleteArray_vectorlEtbeamcLcLclustermUgR(void *p);
   static void destruct_vectorlEtbeamcLcLclustermUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<tbeam::cluster*>*)
   {
      vector<tbeam::cluster*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<tbeam::cluster*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<tbeam::cluster*>", -2, "prec_stl/vector", 49,
                  typeid(vector<tbeam::cluster*>), DefineBehavior(ptr, ptr),
                  0, &vectorlEtbeamcLcLclustermUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<tbeam::cluster*>) );
      instance.SetNew(&new_vectorlEtbeamcLcLclustermUgR);
      instance.SetNewArray(&newArray_vectorlEtbeamcLcLclustermUgR);
      instance.SetDelete(&delete_vectorlEtbeamcLcLclustermUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEtbeamcLcLclustermUgR);
      instance.SetDestructor(&destruct_vectorlEtbeamcLcLclustermUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<tbeam::cluster*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<tbeam::cluster*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEtbeamcLcLclustermUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<tbeam::cluster*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEtbeamcLcLclustermUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<tbeam::cluster*> : new vector<tbeam::cluster*>;
   }
   static void *newArray_vectorlEtbeamcLcLclustermUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<tbeam::cluster*>[nElements] : new vector<tbeam::cluster*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEtbeamcLcLclustermUgR(void *p) {
      delete ((vector<tbeam::cluster*>*)p);
   }
   static void deleteArray_vectorlEtbeamcLcLclustermUgR(void *p) {
      delete [] ((vector<tbeam::cluster*>*)p);
   }
   static void destruct_vectorlEtbeamcLcLclustermUgR(void *p) {
      typedef vector<tbeam::cluster*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<tbeam::cluster*>

namespace ROOT {
   void vectorlEtbeamcLcLclustergR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEtbeamcLcLclustergR_Dictionary();
   static void *new_vectorlEtbeamcLcLclustergR(void *p = 0);
   static void *newArray_vectorlEtbeamcLcLclustergR(Long_t size, void *p);
   static void delete_vectorlEtbeamcLcLclustergR(void *p);
   static void deleteArray_vectorlEtbeamcLcLclustergR(void *p);
   static void destruct_vectorlEtbeamcLcLclustergR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<tbeam::cluster>*)
   {
      vector<tbeam::cluster> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<tbeam::cluster>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<tbeam::cluster>", -2, "prec_stl/vector", 49,
                  typeid(vector<tbeam::cluster>), DefineBehavior(ptr, ptr),
                  0, &vectorlEtbeamcLcLclustergR_Dictionary, isa_proxy, 4,
                  sizeof(vector<tbeam::cluster>) );
      instance.SetNew(&new_vectorlEtbeamcLcLclustergR);
      instance.SetNewArray(&newArray_vectorlEtbeamcLcLclustergR);
      instance.SetDelete(&delete_vectorlEtbeamcLcLclustergR);
      instance.SetDeleteArray(&deleteArray_vectorlEtbeamcLcLclustergR);
      instance.SetDestructor(&destruct_vectorlEtbeamcLcLclustergR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<tbeam::cluster> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<tbeam::cluster>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEtbeamcLcLclustergR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<tbeam::cluster>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEtbeamcLcLclustergR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<tbeam::cluster> : new vector<tbeam::cluster>;
   }
   static void *newArray_vectorlEtbeamcLcLclustergR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<tbeam::cluster>[nElements] : new vector<tbeam::cluster>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEtbeamcLcLclustergR(void *p) {
      delete ((vector<tbeam::cluster>*)p);
   }
   static void deleteArray_vectorlEtbeamcLcLclustergR(void *p) {
      delete [] ((vector<tbeam::cluster>*)p);
   }
   static void destruct_vectorlEtbeamcLcLclustergR(void *p) {
      typedef vector<tbeam::cluster> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<tbeam::cluster>

namespace ROOT {
   void vectorlEtbeamcLcLstubmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEtbeamcLcLstubmUgR_Dictionary();
   static void *new_vectorlEtbeamcLcLstubmUgR(void *p = 0);
   static void *newArray_vectorlEtbeamcLcLstubmUgR(Long_t size, void *p);
   static void delete_vectorlEtbeamcLcLstubmUgR(void *p);
   static void deleteArray_vectorlEtbeamcLcLstubmUgR(void *p);
   static void destruct_vectorlEtbeamcLcLstubmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<tbeam::stub*>*)
   {
      vector<tbeam::stub*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<tbeam::stub*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<tbeam::stub*>", -2, "prec_stl/vector", 49,
                  typeid(vector<tbeam::stub*>), DefineBehavior(ptr, ptr),
                  0, &vectorlEtbeamcLcLstubmUgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<tbeam::stub*>) );
      instance.SetNew(&new_vectorlEtbeamcLcLstubmUgR);
      instance.SetNewArray(&newArray_vectorlEtbeamcLcLstubmUgR);
      instance.SetDelete(&delete_vectorlEtbeamcLcLstubmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEtbeamcLcLstubmUgR);
      instance.SetDestructor(&destruct_vectorlEtbeamcLcLstubmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<tbeam::stub*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<tbeam::stub*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEtbeamcLcLstubmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<tbeam::stub*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEtbeamcLcLstubmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<tbeam::stub*> : new vector<tbeam::stub*>;
   }
   static void *newArray_vectorlEtbeamcLcLstubmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<tbeam::stub*>[nElements] : new vector<tbeam::stub*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEtbeamcLcLstubmUgR(void *p) {
      delete ((vector<tbeam::stub*>*)p);
   }
   static void deleteArray_vectorlEtbeamcLcLstubmUgR(void *p) {
      delete [] ((vector<tbeam::stub*>*)p);
   }
   static void destruct_vectorlEtbeamcLcLstubmUgR(void *p) {
      typedef vector<tbeam::stub*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<tbeam::stub*>

namespace ROOT {
   void vectorlEtbeamcLcLstubgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEtbeamcLcLstubgR_Dictionary();
   static void *new_vectorlEtbeamcLcLstubgR(void *p = 0);
   static void *newArray_vectorlEtbeamcLcLstubgR(Long_t size, void *p);
   static void delete_vectorlEtbeamcLcLstubgR(void *p);
   static void deleteArray_vectorlEtbeamcLcLstubgR(void *p);
   static void destruct_vectorlEtbeamcLcLstubgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<tbeam::stub>*)
   {
      vector<tbeam::stub> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<tbeam::stub>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<tbeam::stub>", -2, "prec_stl/vector", 49,
                  typeid(vector<tbeam::stub>), DefineBehavior(ptr, ptr),
                  0, &vectorlEtbeamcLcLstubgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<tbeam::stub>) );
      instance.SetNew(&new_vectorlEtbeamcLcLstubgR);
      instance.SetNewArray(&newArray_vectorlEtbeamcLcLstubgR);
      instance.SetDelete(&delete_vectorlEtbeamcLcLstubgR);
      instance.SetDeleteArray(&deleteArray_vectorlEtbeamcLcLstubgR);
      instance.SetDestructor(&destruct_vectorlEtbeamcLcLstubgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<tbeam::stub> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<tbeam::stub>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEtbeamcLcLstubgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<tbeam::stub>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEtbeamcLcLstubgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<tbeam::stub> : new vector<tbeam::stub>;
   }
   static void *newArray_vectorlEtbeamcLcLstubgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<tbeam::stub>[nElements] : new vector<tbeam::stub>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEtbeamcLcLstubgR(void *p) {
      delete ((vector<tbeam::stub>*)p);
   }
   static void deleteArray_vectorlEtbeamcLcLstubgR(void *p) {
      delete [] ((vector<tbeam::stub>*)p);
   }
   static void destruct_vectorlEtbeamcLcLstubgR(void *p) {
      typedef vector<tbeam::stub> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<tbeam::stub>

namespace ROOT {
   void vectorlEunsignedsPshortgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEunsignedsPshortgR_Dictionary();
   static void *new_vectorlEunsignedsPshortgR(void *p = 0);
   static void *newArray_vectorlEunsignedsPshortgR(Long_t size, void *p);
   static void delete_vectorlEunsignedsPshortgR(void *p);
   static void deleteArray_vectorlEunsignedsPshortgR(void *p);
   static void destruct_vectorlEunsignedsPshortgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<unsigned short>*)
   {
      vector<unsigned short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<unsigned short>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<unsigned short>", -2, "vector.dll", 0,
                  typeid(vector<unsigned short>), DefineBehavior(ptr, ptr),
                  0, &vectorlEunsignedsPshortgR_Dictionary, isa_proxy, 4,
                  sizeof(vector<unsigned short>) );
      instance.SetNew(&new_vectorlEunsignedsPshortgR);
      instance.SetNewArray(&newArray_vectorlEunsignedsPshortgR);
      instance.SetDelete(&delete_vectorlEunsignedsPshortgR);
      instance.SetDeleteArray(&deleteArray_vectorlEunsignedsPshortgR);
      instance.SetDestructor(&destruct_vectorlEunsignedsPshortgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<unsigned short> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<unsigned short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEunsignedsPshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<unsigned short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEunsignedsPshortgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned short> : new vector<unsigned short>;
   }
   static void *newArray_vectorlEunsignedsPshortgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned short>[nElements] : new vector<unsigned short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEunsignedsPshortgR(void *p) {
      delete ((vector<unsigned short>*)p);
   }
   static void deleteArray_vectorlEunsignedsPshortgR(void *p) {
      delete [] ((vector<unsigned short>*)p);
   }
   static void destruct_vectorlEunsignedsPshortgR(void *p) {
      typedef vector<unsigned short> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<unsigned short>

/********************************************************
* Dict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableDict();

extern "C" void G__set_cpp_environmentDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("interface/DataFormats.h");
  G__cpp_reset_tagtableDict();
}
#include <new>
extern "C" int G__cpp_dllrevDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* tbeam::cluster */
static int G__Dict_468_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::cluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tbeam::cluster[n];
     } else {
       p = new((void*) gvp) tbeam::cluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tbeam::cluster;
     } else {
       p = new((void*) gvp) tbeam::cluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_468_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) tbeam::cluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_468_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::cluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_468_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) tbeam::cluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_468_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      tbeam::cluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_468_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tbeam::cluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_468_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::cluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_468_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tbeam::cluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_468_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::cluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_468_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tbeam::cluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Dict_468_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   tbeam::cluster* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new tbeam::cluster(*(tbeam::cluster*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef tbeam::cluster G__TtbeamcLcLcluster;
static int G__Dict_468_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (tbeam::cluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((tbeam::cluster*) (soff+(sizeof(tbeam::cluster)*i)))->~G__TtbeamcLcLcluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (tbeam::cluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((tbeam::cluster*) (soff))->~G__TtbeamcLcLcluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Dict_468_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::cluster* dest = (tbeam::cluster*) G__getstructoffset();
   *dest = *(tbeam::cluster*) libp->para[0].ref;
   const tbeam::cluster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* tbeam::stub */
static int G__Dict_469_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::stub* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tbeam::stub[n];
     } else {
       p = new((void*) gvp) tbeam::stub[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tbeam::stub;
     } else {
       p = new((void*) gvp) tbeam::stub;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_469_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::stub* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new tbeam::stub(*(tbeam::stub*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) tbeam::stub(*(tbeam::stub*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_469_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) tbeam::stub::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_469_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::stub::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_469_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) tbeam::stub::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_469_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      tbeam::stub::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_469_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tbeam::stub*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_469_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::stub::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_469_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tbeam::stub::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_469_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::stub::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_469_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tbeam::stub::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef tbeam::stub G__TtbeamcLcLstub;
static int G__Dict_469_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (tbeam::stub*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((tbeam::stub*) (soff+(sizeof(tbeam::stub)*i)))->~G__TtbeamcLcLstub();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (tbeam::stub*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((tbeam::stub*) (soff))->~G__TtbeamcLcLstub();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Dict_469_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::stub* dest = (tbeam::stub*) G__getstructoffset();
   *dest = *(tbeam::stub*) libp->para[0].ref;
   const tbeam::stub& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* tbeam::cbc */
static int G__Dict_470_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::cbc* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tbeam::cbc[n];
     } else {
       p = new((void*) gvp) tbeam::cbc[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tbeam::cbc;
     } else {
       p = new((void*) gvp) tbeam::cbc;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_tbeamcLcLcbc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_470_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) tbeam::cbc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_470_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::cbc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_470_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) tbeam::cbc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_470_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      tbeam::cbc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_470_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tbeam::cbc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_470_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::cbc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_470_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tbeam::cbc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_470_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::cbc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_470_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tbeam::cbc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Dict_470_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   tbeam::cbc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new tbeam::cbc(*(tbeam::cbc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_tbeamcLcLcbc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef tbeam::cbc G__TtbeamcLcLcbc;
static int G__Dict_470_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (tbeam::cbc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((tbeam::cbc*) (soff+(sizeof(tbeam::cbc)*i)))->~G__TtbeamcLcLcbc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (tbeam::cbc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((tbeam::cbc*) (soff))->~G__TtbeamcLcLcbc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Dict_470_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::cbc* dest = (tbeam::cbc*) G__getstructoffset();
   *dest = *(tbeam::cbc*) libp->para[0].ref;
   const tbeam::cbc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* tbeam::dutEvent */
static int G__Dict_471_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::dutEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tbeam::dutEvent[n];
     } else {
       p = new((void*) gvp) tbeam::dutEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tbeam::dutEvent;
     } else {
       p = new((void*) gvp) tbeam::dutEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_tbeamcLcLdutEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_471_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::dutEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new tbeam::dutEvent(*(tbeam::dutEvent*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) tbeam::dutEvent(*(tbeam::dutEvent*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_tbeamcLcLdutEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_471_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) tbeam::dutEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_471_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::dutEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_471_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) tbeam::dutEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_471_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      tbeam::dutEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_471_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tbeam::dutEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_471_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::dutEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_471_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tbeam::dutEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_471_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::dutEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_471_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tbeam::dutEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef tbeam::dutEvent G__TtbeamcLcLdutEvent;
static int G__Dict_471_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (tbeam::dutEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((tbeam::dutEvent*) (soff+(sizeof(tbeam::dutEvent)*i)))->~G__TtbeamcLcLdutEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (tbeam::dutEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((tbeam::dutEvent*) (soff))->~G__TtbeamcLcLdutEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Dict_471_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::dutEvent* dest = (tbeam::dutEvent*) G__getstructoffset();
   *dest = *(tbeam::dutEvent*) libp->para[0].ref;
   const tbeam::dutEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > > */
static int G__Dict_478_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >[n];
     } else {
       p = new((void*) gvp) map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >;
     } else {
       p = new((void*) gvp) map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >(*((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >(*((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >(*((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >(*((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >(*(map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >(*(map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >& obj = ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->operator=(*(map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator* pobj;
         map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator xobj = ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->begin();
         pobj = new map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator* pobj;
         map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator xobj = ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->end();
         pobj = new map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::reverse_iterator* pobj;
         map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::reverse_iterator xobj = ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->rbegin();
         pobj = new map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::reverse_iterator* pobj;
         map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::reverse_iterator xobj = ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->rend();
         pobj = new map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<tbeam::cluster*,allocator<tbeam::cluster*> >& obj = ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator,bool>* pobj;
         pair<map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator,bool> xobj = ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->insert(*(map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator* pobj;
         map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator xobj = ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->insert(*((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator*) G__int(libp->para[0])), *(map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::value_type*) libp->para[1].ref);
         pobj = new map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->insert(*((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->insert(*((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->erase(*((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->erase(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->erase(*((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->swap(*(map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator* pobj;
         map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator xobj = ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->find(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->count(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator* pobj;
         map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator xobj = ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->lower_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_478_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator* pobj;
         map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator xobj = ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) G__getstructoffset())->upper_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > > G__TmaplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR;
static int G__Dict_478_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) (soff+(sizeof(map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >)*i)))->~G__TmaplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*) (soff))->~G__TmaplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<int,allocator<int> > */
static int G__Dict_484_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >::reference obj = ((vector<int,allocator<int> >*) G__getstructoffset())->at((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::const_reference obj = ((const vector<int,allocator<int> >*) G__getstructoffset())->at((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::iterator* pobj;
         vector<int,allocator<int> >::iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->begin();
         pobj = new vector<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::iterator* pobj;
         vector<int,allocator<int> >::iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->end();
         pobj = new vector<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::reverse_iterator* pobj;
         vector<int,allocator<int> >::reverse_iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->rbegin();
         pobj = new vector<int,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::reverse_iterator* pobj;
         vector<int,allocator<int> >::reverse_iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->rend();
         pobj = new vector<int,allocator<int> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->resize((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->resize((vector<int,allocator<int> >::size_type) G__int(libp->para[0]), (int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<int,allocator<int> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >::reference obj = ((vector<int,allocator<int> >*) G__getstructoffset())->operator[]((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::const_reference obj = ((const vector<int,allocator<int> >*) G__getstructoffset())->operator[]((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >[n];
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >;
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1]));
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]), *(int*) G__Intref(&libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<int,allocator<int> >((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<int,allocator<int> >(*(vector<int,allocator<int> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<int,allocator<int> >(*(vector<int,allocator<int> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<int,allocator<int> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<int,allocator<int> >(*((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<int,allocator<int> >(*((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >& obj = ((vector<int,allocator<int> >*) G__getstructoffset())->operator=(*(vector<int,allocator<int> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->reserve((vector<int,allocator<int> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((vector<int,allocator<int> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const int& obj = ((vector<int,allocator<int> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->push_back(*(int*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->swap(*(vector<int,allocator<int> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<int,allocator<int> >::iterator* pobj;
         vector<int,allocator<int> >::iterator xobj = ((vector<int,allocator<int> >*) G__getstructoffset())->insert(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), *(int*) G__Intref(&libp->para[1]));
         pobj = new vector<int,allocator<int> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->insert(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[1]))
, *((vector<int,allocator<int> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->insert(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), (vector<int,allocator<int> >::size_type) G__int(libp->para[1])
, *(int*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->erase(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->erase(*((vector<int,allocator<int> >::iterator*) G__int(libp->para[0])), *((vector<int,allocator<int> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_484_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<int,allocator<int> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<int,allocator<int> > G__TvectorlEintcOallocatorlEintgRsPgR;
static int G__Dict_484_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<int,allocator<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<int,allocator<int> >*) (soff+(sizeof(vector<int,allocator<int> >)*i)))->~G__TvectorlEintcOallocatorlEintgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<int,allocator<int> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<int,allocator<int> >*) (soff))->~G__TvectorlEintcOallocatorlEintgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > > */
static int G__Dict_489_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >[n];
     } else {
       p = new((void*) gvp) map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >;
     } else {
       p = new((void*) gvp) map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >(*((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >(*((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >(*((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >(*((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >(*(map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >(*(map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >& obj = ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->operator=(*(map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator* pobj;
         map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator xobj = ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->begin();
         pobj = new map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator* pobj;
         map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator xobj = ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->end();
         pobj = new map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::reverse_iterator* pobj;
         map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::reverse_iterator xobj = ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->rbegin();
         pobj = new map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::reverse_iterator* pobj;
         map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::reverse_iterator xobj = ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->rend();
         pobj = new map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int,allocator<int> >& obj = ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator,bool>* pobj;
         pair<map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator,bool> xobj = ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->insert(*(map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator* pobj;
         map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator xobj = ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->insert(*((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator*) G__int(libp->para[0])), *(map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::value_type*) libp->para[1].ref);
         pobj = new map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->insert(*((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->insert(*((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->erase(*((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->erase(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->erase(*((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->swap(*(map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator* pobj;
         map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator xobj = ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->find(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->count(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator* pobj;
         map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator xobj = ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->lower_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_489_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator* pobj;
         map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator xobj = ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) G__getstructoffset())->upper_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > > G__TmaplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR;
static int G__Dict_489_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) (soff+(sizeof(map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >)*i)))->~G__TmaplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*) (soff))->~G__TmaplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<tbeam::stub*,allocator<tbeam::stub*> > */
static int G__Dict_495_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::stub*,allocator<tbeam::stub*> >::reference obj = ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->at((vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::stub*,allocator<tbeam::stub*> >::const_reference obj = ((const vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->at((vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator* pobj;
         vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator xobj = ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->begin();
         pobj = new vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator* pobj;
         vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator xobj = ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->end();
         pobj = new vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::stub*,allocator<tbeam::stub*> >::reverse_iterator* pobj;
         vector<tbeam::stub*,allocator<tbeam::stub*> >::reverse_iterator xobj = ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->rbegin();
         pobj = new vector<tbeam::stub*,allocator<tbeam::stub*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::stub*,allocator<tbeam::stub*> >::reverse_iterator* pobj;
         vector<tbeam::stub*,allocator<tbeam::stub*> >::reverse_iterator xobj = ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->rend();
         pobj = new vector<tbeam::stub*,allocator<tbeam::stub*> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->resize((vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->resize((vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type) G__int(libp->para[0]), (tbeam::stub*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::stub*,allocator<tbeam::stub*> >::reference obj = ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->operator[]((vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::stub*,allocator<tbeam::stub*> >::const_reference obj = ((const vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->operator[]((vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tbeam::stub*,allocator<tbeam::stub*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tbeam::stub*,allocator<tbeam::stub*> >[n];
     } else {
       p = new((void*) gvp) vector<tbeam::stub*,allocator<tbeam::stub*> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tbeam::stub*,allocator<tbeam::stub*> >;
     } else {
       p = new((void*) gvp) vector<tbeam::stub*,allocator<tbeam::stub*> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tbeam::stub*,allocator<tbeam::stub*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tbeam::stub*,allocator<tbeam::stub*> >((vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(tbeam::stub**) libp->para[1].ref : *(tbeam::stub**) (void*) (&G__Mlong(libp->para[1])));
     } else {
       p = new((void*) gvp) vector<tbeam::stub*,allocator<tbeam::stub*> >((vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type) G__int(libp->para[0]), libp->para[1].ref ? *(tbeam::stub**) libp->para[1].ref : *(tbeam::stub**) (void*) (&G__Mlong(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tbeam::stub*,allocator<tbeam::stub*> >((vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<tbeam::stub*,allocator<tbeam::stub*> >((vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tbeam::stub*,allocator<tbeam::stub*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<tbeam::stub*,allocator<tbeam::stub*> >(*(vector<tbeam::stub*,allocator<tbeam::stub*> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<tbeam::stub*,allocator<tbeam::stub*> >(*(vector<tbeam::stub*,allocator<tbeam::stub*> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tbeam::stub*,allocator<tbeam::stub*> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<tbeam::stub*,allocator<tbeam::stub*> >(*((vector<tbeam::stub*,allocator<tbeam::stub*> >::const_iterator*) G__int(libp->para[0])), *((vector<tbeam::stub*,allocator<tbeam::stub*> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<tbeam::stub*,allocator<tbeam::stub*> >(*((vector<tbeam::stub*,allocator<tbeam::stub*> >::const_iterator*) G__int(libp->para[0])), *((vector<tbeam::stub*,allocator<tbeam::stub*> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<tbeam::stub*,allocator<tbeam::stub*> >& obj = ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->operator=(*(vector<tbeam::stub*,allocator<tbeam::stub*> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->reserve((vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         tbeam::stub*& obj = ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         tbeam::stub*& obj = ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->push_back(libp->para[0].ref ? *(tbeam::stub**) libp->para[0].ref : *(tbeam::stub**) (void*) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->swap(*(vector<tbeam::stub*,allocator<tbeam::stub*> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator* pobj;
         vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator xobj = ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->insert(*((vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator*) G__int(libp->para[0])), libp->para[1].ref ? *(tbeam::stub**) libp->para[1].ref : *(tbeam::stub**) (void*) (&G__Mlong(libp->para[1])));
         pobj = new vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->insert(*((vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator*) G__int(libp->para[0])), *((vector<tbeam::stub*,allocator<tbeam::stub*> >::const_iterator*) G__int(libp->para[1]))
, *((vector<tbeam::stub*,allocator<tbeam::stub*> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->insert(*((vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator*) G__int(libp->para[0])), (vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type) G__int(libp->para[1])
, libp->para[2].ref ? *(tbeam::stub**) libp->para[2].ref : *(tbeam::stub**) (void*) (&G__Mlong(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->erase(*((vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->erase(*((vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator*) G__int(libp->para[0])), *((vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_495_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<tbeam::stub*,allocator<tbeam::stub*> > G__TvectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR;
static int G__Dict_495_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<tbeam::stub*,allocator<tbeam::stub*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) (soff+(sizeof(vector<tbeam::stub*,allocator<tbeam::stub*> >)*i)))->~G__TvectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<tbeam::stub*,allocator<tbeam::stub*> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<tbeam::stub*,allocator<tbeam::stub*> >*) (soff))->~G__TvectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* tbeam::condEvent */
static int G__Dict_498_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::condEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tbeam::condEvent[n];
     } else {
       p = new((void*) gvp) tbeam::condEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tbeam::condEvent;
     } else {
       p = new((void*) gvp) tbeam::condEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_tbeamcLcLcondEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_498_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) tbeam::condEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_498_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::condEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_498_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) tbeam::condEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_498_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      tbeam::condEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_498_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tbeam::condEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_498_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::condEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_498_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tbeam::condEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_498_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::condEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_498_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tbeam::condEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Dict_498_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   tbeam::condEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new tbeam::condEvent(*(tbeam::condEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_tbeamcLcLcondEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef tbeam::condEvent G__TtbeamcLcLcondEvent;
static int G__Dict_498_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (tbeam::condEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((tbeam::condEvent*) (soff+(sizeof(tbeam::condEvent)*i)))->~G__TtbeamcLcLcondEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (tbeam::condEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((tbeam::condEvent*) (soff))->~G__TtbeamcLcLcondEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Dict_498_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::condEvent* dest = (tbeam::condEvent*) G__getstructoffset();
   *dest = *(tbeam::condEvent*) libp->para[0].ref;
   const tbeam::condEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* tbeam::TelescopeEvent */
static int G__Dict_503_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::TelescopeEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tbeam::TelescopeEvent[n];
     } else {
       p = new((void*) gvp) tbeam::TelescopeEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tbeam::TelescopeEvent;
     } else {
       p = new((void*) gvp) tbeam::TelescopeEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_tbeamcLcLTelescopeEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_503_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::TelescopeEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new tbeam::TelescopeEvent(*(tbeam::TelescopeEvent*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) tbeam::TelescopeEvent(*(tbeam::TelescopeEvent*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_tbeamcLcLTelescopeEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_503_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) tbeam::TelescopeEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_503_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::TelescopeEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_503_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) tbeam::TelescopeEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_503_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      tbeam::TelescopeEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_503_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tbeam::TelescopeEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_503_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::TelescopeEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_503_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tbeam::TelescopeEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_503_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::TelescopeEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_503_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tbeam::TelescopeEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef tbeam::TelescopeEvent G__TtbeamcLcLTelescopeEvent;
static int G__Dict_503_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (tbeam::TelescopeEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((tbeam::TelescopeEvent*) (soff+(sizeof(tbeam::TelescopeEvent)*i)))->~G__TtbeamcLcLTelescopeEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (tbeam::TelescopeEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((tbeam::TelescopeEvent*) (soff))->~G__TtbeamcLcLTelescopeEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Dict_503_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::TelescopeEvent* dest = (tbeam::TelescopeEvent*) G__getstructoffset();
   *dest = *(tbeam::TelescopeEvent*) libp->para[0].ref;
   const tbeam::TelescopeEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* tbeam::FeIFourEvent */
static int G__Dict_504_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::FeIFourEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tbeam::FeIFourEvent[n];
     } else {
       p = new((void*) gvp) tbeam::FeIFourEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tbeam::FeIFourEvent;
     } else {
       p = new((void*) gvp) tbeam::FeIFourEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_tbeamcLcLFeIFourEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_504_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::FeIFourEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new tbeam::FeIFourEvent(*(tbeam::FeIFourEvent*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) tbeam::FeIFourEvent(*(tbeam::FeIFourEvent*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_tbeamcLcLFeIFourEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_504_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) tbeam::FeIFourEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_504_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::FeIFourEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_504_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) tbeam::FeIFourEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_504_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      tbeam::FeIFourEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_504_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tbeam::FeIFourEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_504_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::FeIFourEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_504_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tbeam::FeIFourEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_504_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::FeIFourEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_504_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tbeam::FeIFourEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef tbeam::FeIFourEvent G__TtbeamcLcLFeIFourEvent;
static int G__Dict_504_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (tbeam::FeIFourEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((tbeam::FeIFourEvent*) (soff+(sizeof(tbeam::FeIFourEvent)*i)))->~G__TtbeamcLcLFeIFourEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (tbeam::FeIFourEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((tbeam::FeIFourEvent*) (soff))->~G__TtbeamcLcLFeIFourEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Dict_504_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::FeIFourEvent* dest = (tbeam::FeIFourEvent*) G__getstructoffset();
   *dest = *(tbeam::FeIFourEvent*) libp->para[0].ref;
   const tbeam::FeIFourEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* tbeam::Track */
static int G__Dict_505_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tbeam::Track[n];
     } else {
       p = new((void*) gvp) tbeam::Track[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new tbeam::Track;
     } else {
       p = new((void*) gvp) tbeam::Track;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_505_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new tbeam::Track(
(int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]));
   } else {
     p = new((void*) gvp) tbeam::Track(
(int) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (double) G__double(libp->para[4]), (double) G__double(libp->para[5])
, (double) G__double(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_505_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::Track* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new tbeam::Track(*(tbeam::Track*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) tbeam::Track(*(tbeam::Track*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_505_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) tbeam::Track::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_505_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::Track::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_505_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) tbeam::Track::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_505_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      tbeam::Track::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_505_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((tbeam::Track*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_505_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::Track::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_505_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tbeam::Track::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_505_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) tbeam::Track::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_505_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) tbeam::Track::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef tbeam::Track G__TtbeamcLcLTrack;
static int G__Dict_505_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (tbeam::Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((tbeam::Track*) (soff+(sizeof(tbeam::Track)*i)))->~G__TtbeamcLcLTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (tbeam::Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((tbeam::Track*) (soff))->~G__TtbeamcLcLTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Dict_505_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   tbeam::Track* dest = (tbeam::Track*) G__getstructoffset();
   *dest = *(tbeam::Track*) libp->para[0].ref;
   const tbeam::Track& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > > */
static int G__Dict_508_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >[n];
     } else {
       p = new((void*) gvp) map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >;
     } else {
       p = new((void*) gvp) map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >(*((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >(*((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >(*((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >(*((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >(*(map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >(*(map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >& obj = ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->operator=(*(map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator* pobj;
         map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator xobj = ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->begin();
         pobj = new map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator* pobj;
         map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator xobj = ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->end();
         pobj = new map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::reverse_iterator* pobj;
         map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::reverse_iterator xobj = ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->rbegin();
         pobj = new map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::reverse_iterator* pobj;
         map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::reverse_iterator xobj = ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->rend();
         pobj = new map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<double,allocator<double> >& obj = ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator,bool>* pobj;
         pair<map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator,bool> xobj = ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->insert(*(map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator* pobj;
         map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator xobj = ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->insert(*((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator*) G__int(libp->para[0])), *(map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::value_type*) libp->para[1].ref);
         pobj = new map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->insert(*((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->insert(*((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->erase(*((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->erase(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->erase(*((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->swap(*(map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator* pobj;
         map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator xobj = ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->find(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->count(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator* pobj;
         map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator xobj = ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->lower_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_508_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator* pobj;
         map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator xobj = ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) G__getstructoffset())->upper_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > > G__TmaplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR;
static int G__Dict_508_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) (soff+(sizeof(map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >)*i)))->~G__TmaplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*) (soff))->~G__TmaplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<tbeam::cluster,allocator<tbeam::cluster> > */
static int G__Dict_514_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<tbeam::cluster,allocator<tbeam::cluster> >::reference obj = ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->at((vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::cluster,allocator<tbeam::cluster> >::const_reference obj = ((const vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->at((vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator* pobj;
         vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator xobj = ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->begin();
         pobj = new vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator* pobj;
         vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator xobj = ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->end();
         pobj = new vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::cluster,allocator<tbeam::cluster> >::reverse_iterator* pobj;
         vector<tbeam::cluster,allocator<tbeam::cluster> >::reverse_iterator xobj = ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->rbegin();
         pobj = new vector<tbeam::cluster,allocator<tbeam::cluster> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::cluster,allocator<tbeam::cluster> >::reverse_iterator* pobj;
         vector<tbeam::cluster,allocator<tbeam::cluster> >::reverse_iterator xobj = ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->rend();
         pobj = new vector<tbeam::cluster,allocator<tbeam::cluster> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->resize((vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->resize((vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type) G__int(libp->para[0]), *((tbeam::cluster*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<tbeam::cluster,allocator<tbeam::cluster> >::reference obj = ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->operator[]((vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::cluster,allocator<tbeam::cluster> >::const_reference obj = ((const vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->operator[]((vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tbeam::cluster,allocator<tbeam::cluster> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tbeam::cluster,allocator<tbeam::cluster> >[n];
     } else {
       p = new((void*) gvp) vector<tbeam::cluster,allocator<tbeam::cluster> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tbeam::cluster,allocator<tbeam::cluster> >;
     } else {
       p = new((void*) gvp) vector<tbeam::cluster,allocator<tbeam::cluster> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tbeam::cluster,allocator<tbeam::cluster> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tbeam::cluster,allocator<tbeam::cluster> >((vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type) G__int(libp->para[0]), *(tbeam::cluster*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<tbeam::cluster,allocator<tbeam::cluster> >((vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type) G__int(libp->para[0]), *(tbeam::cluster*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tbeam::cluster,allocator<tbeam::cluster> >((vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<tbeam::cluster,allocator<tbeam::cluster> >((vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tbeam::cluster,allocator<tbeam::cluster> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<tbeam::cluster,allocator<tbeam::cluster> >(*(vector<tbeam::cluster,allocator<tbeam::cluster> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<tbeam::cluster,allocator<tbeam::cluster> >(*(vector<tbeam::cluster,allocator<tbeam::cluster> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tbeam::cluster,allocator<tbeam::cluster> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<tbeam::cluster,allocator<tbeam::cluster> >(*((vector<tbeam::cluster,allocator<tbeam::cluster> >::const_iterator*) G__int(libp->para[0])), *((vector<tbeam::cluster,allocator<tbeam::cluster> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<tbeam::cluster,allocator<tbeam::cluster> >(*((vector<tbeam::cluster,allocator<tbeam::cluster> >::const_iterator*) G__int(libp->para[0])), *((vector<tbeam::cluster,allocator<tbeam::cluster> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<tbeam::cluster,allocator<tbeam::cluster> >& obj = ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->operator=(*(vector<tbeam::cluster,allocator<tbeam::cluster> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->reserve((vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const tbeam::cluster& obj = ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const tbeam::cluster& obj = ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->push_back(*(tbeam::cluster*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->swap(*(vector<tbeam::cluster,allocator<tbeam::cluster> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator* pobj;
         vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator xobj = ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->insert(*((vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator*) G__int(libp->para[0])), *(tbeam::cluster*) libp->para[1].ref);
         pobj = new vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->insert(*((vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator*) G__int(libp->para[0])), *((vector<tbeam::cluster,allocator<tbeam::cluster> >::const_iterator*) G__int(libp->para[1]))
, *((vector<tbeam::cluster,allocator<tbeam::cluster> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->insert(*((vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator*) G__int(libp->para[0])), (vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type) G__int(libp->para[1])
, *(tbeam::cluster*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->erase(*((vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->erase(*((vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator*) G__int(libp->para[0])), *((vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_514_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<tbeam::cluster,allocator<tbeam::cluster> > G__TvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR;
static int G__Dict_514_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<tbeam::cluster,allocator<tbeam::cluster> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) (soff+(sizeof(vector<tbeam::cluster,allocator<tbeam::cluster> >)*i)))->~G__TvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<tbeam::cluster,allocator<tbeam::cluster> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<tbeam::cluster,allocator<tbeam::cluster> >*) (soff))->~G__TvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > > */
static int G__Dict_519_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >[n];
     } else {
       p = new((void*) gvp) map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >;
     } else {
       p = new((void*) gvp) map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >(*((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >(*((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >(*((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >(*((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >(*(map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >(*(map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >& obj = ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->operator=(*(map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator* pobj;
         map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator xobj = ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->begin();
         pobj = new map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator* pobj;
         map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator xobj = ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->end();
         pobj = new map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::reverse_iterator* pobj;
         map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::reverse_iterator xobj = ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->rbegin();
         pobj = new map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::reverse_iterator* pobj;
         map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::reverse_iterator xobj = ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->rend();
         pobj = new map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<tbeam::cluster,allocator<tbeam::cluster> >& obj = ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator,bool>* pobj;
         pair<map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator,bool> xobj = ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->insert(*(map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator* pobj;
         map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator xobj = ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->insert(*((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator*) G__int(libp->para[0])), *(map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::value_type*) libp->para[1].ref);
         pobj = new map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->insert(*((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->insert(*((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->erase(*((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->erase(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->erase(*((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->swap(*(map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator* pobj;
         map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator xobj = ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->find(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->count(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator* pobj;
         map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator xobj = ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->lower_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_519_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator* pobj;
         map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator xobj = ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) G__getstructoffset())->upper_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > > G__TmaplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR;
static int G__Dict_519_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) (soff+(sizeof(map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >)*i)))->~G__TmaplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*) (soff))->~G__TmaplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<tbeam::stub,allocator<tbeam::stub> > */
static int G__Dict_525_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<tbeam::stub,allocator<tbeam::stub> >::reference obj = ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->at((vector<tbeam::stub,allocator<tbeam::stub> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::stub,allocator<tbeam::stub> >::const_reference obj = ((const vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->at((vector<tbeam::stub,allocator<tbeam::stub> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::stub,allocator<tbeam::stub> >::iterator* pobj;
         vector<tbeam::stub,allocator<tbeam::stub> >::iterator xobj = ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->begin();
         pobj = new vector<tbeam::stub,allocator<tbeam::stub> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::stub,allocator<tbeam::stub> >::iterator* pobj;
         vector<tbeam::stub,allocator<tbeam::stub> >::iterator xobj = ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->end();
         pobj = new vector<tbeam::stub,allocator<tbeam::stub> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::stub,allocator<tbeam::stub> >::reverse_iterator* pobj;
         vector<tbeam::stub,allocator<tbeam::stub> >::reverse_iterator xobj = ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->rbegin();
         pobj = new vector<tbeam::stub,allocator<tbeam::stub> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::stub,allocator<tbeam::stub> >::reverse_iterator* pobj;
         vector<tbeam::stub,allocator<tbeam::stub> >::reverse_iterator xobj = ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->rend();
         pobj = new vector<tbeam::stub,allocator<tbeam::stub> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->resize((vector<tbeam::stub,allocator<tbeam::stub> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->resize((vector<tbeam::stub,allocator<tbeam::stub> >::size_type) G__int(libp->para[0]), *((tbeam::stub*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<tbeam::stub,allocator<tbeam::stub> >::reference obj = ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->operator[]((vector<tbeam::stub,allocator<tbeam::stub> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::stub,allocator<tbeam::stub> >::const_reference obj = ((const vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->operator[]((vector<tbeam::stub,allocator<tbeam::stub> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tbeam::stub,allocator<tbeam::stub> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tbeam::stub,allocator<tbeam::stub> >[n];
     } else {
       p = new((void*) gvp) vector<tbeam::stub,allocator<tbeam::stub> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tbeam::stub,allocator<tbeam::stub> >;
     } else {
       p = new((void*) gvp) vector<tbeam::stub,allocator<tbeam::stub> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tbeam::stub,allocator<tbeam::stub> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tbeam::stub,allocator<tbeam::stub> >((vector<tbeam::stub,allocator<tbeam::stub> >::size_type) G__int(libp->para[0]), *(tbeam::stub*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<tbeam::stub,allocator<tbeam::stub> >((vector<tbeam::stub,allocator<tbeam::stub> >::size_type) G__int(libp->para[0]), *(tbeam::stub*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tbeam::stub,allocator<tbeam::stub> >((vector<tbeam::stub,allocator<tbeam::stub> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<tbeam::stub,allocator<tbeam::stub> >((vector<tbeam::stub,allocator<tbeam::stub> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tbeam::stub,allocator<tbeam::stub> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<tbeam::stub,allocator<tbeam::stub> >(*(vector<tbeam::stub,allocator<tbeam::stub> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<tbeam::stub,allocator<tbeam::stub> >(*(vector<tbeam::stub,allocator<tbeam::stub> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tbeam::stub,allocator<tbeam::stub> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<tbeam::stub,allocator<tbeam::stub> >(*((vector<tbeam::stub,allocator<tbeam::stub> >::const_iterator*) G__int(libp->para[0])), *((vector<tbeam::stub,allocator<tbeam::stub> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<tbeam::stub,allocator<tbeam::stub> >(*((vector<tbeam::stub,allocator<tbeam::stub> >::const_iterator*) G__int(libp->para[0])), *((vector<tbeam::stub,allocator<tbeam::stub> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<tbeam::stub,allocator<tbeam::stub> >& obj = ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->operator=(*(vector<tbeam::stub,allocator<tbeam::stub> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->reserve((vector<tbeam::stub,allocator<tbeam::stub> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const tbeam::stub& obj = ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const tbeam::stub& obj = ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->push_back(*(tbeam::stub*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->swap(*(vector<tbeam::stub,allocator<tbeam::stub> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::stub,allocator<tbeam::stub> >::iterator* pobj;
         vector<tbeam::stub,allocator<tbeam::stub> >::iterator xobj = ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->insert(*((vector<tbeam::stub,allocator<tbeam::stub> >::iterator*) G__int(libp->para[0])), *(tbeam::stub*) libp->para[1].ref);
         pobj = new vector<tbeam::stub,allocator<tbeam::stub> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->insert(*((vector<tbeam::stub,allocator<tbeam::stub> >::iterator*) G__int(libp->para[0])), *((vector<tbeam::stub,allocator<tbeam::stub> >::const_iterator*) G__int(libp->para[1]))
, *((vector<tbeam::stub,allocator<tbeam::stub> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->insert(*((vector<tbeam::stub,allocator<tbeam::stub> >::iterator*) G__int(libp->para[0])), (vector<tbeam::stub,allocator<tbeam::stub> >::size_type) G__int(libp->para[1])
, *(tbeam::stub*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->erase(*((vector<tbeam::stub,allocator<tbeam::stub> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->erase(*((vector<tbeam::stub,allocator<tbeam::stub> >::iterator*) G__int(libp->para[0])), *((vector<tbeam::stub,allocator<tbeam::stub> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_525_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::stub,allocator<tbeam::stub> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<tbeam::stub,allocator<tbeam::stub> > G__TvectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR;
static int G__Dict_525_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<tbeam::stub,allocator<tbeam::stub> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<tbeam::stub,allocator<tbeam::stub> >*) (soff+(sizeof(vector<tbeam::stub,allocator<tbeam::stub> >)*i)))->~G__TvectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<tbeam::stub,allocator<tbeam::stub> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<tbeam::stub,allocator<tbeam::stub> >*) (soff))->~G__TvectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > > */
static int G__Dict_530_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >[n];
     } else {
       p = new((void*) gvp) map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >;
     } else {
       p = new((void*) gvp) map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >(*((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >(*((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >(*((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >(*((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >(*(map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >(*(map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >& obj = ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->operator=(*(map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator* pobj;
         map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator xobj = ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->begin();
         pobj = new map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator* pobj;
         map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator xobj = ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->end();
         pobj = new map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::reverse_iterator* pobj;
         map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::reverse_iterator xobj = ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->rbegin();
         pobj = new map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::reverse_iterator* pobj;
         map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::reverse_iterator xobj = ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->rend();
         pobj = new map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<unsigned short,allocator<unsigned short> >& obj = ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator,bool>* pobj;
         pair<map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator,bool> xobj = ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->insert(*(map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator* pobj;
         map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator xobj = ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->insert(*((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator*) G__int(libp->para[0])), *(map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::value_type*) libp->para[1].ref);
         pobj = new map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->insert(*((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->insert(*((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::reverse_iterator*) G__int(libp->para[0])), *((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->erase(*((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->erase(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->erase(*((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator*) G__int(libp->para[0])), *((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->swap(*(map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator* pobj;
         map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator xobj = ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->find(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->count(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator* pobj;
         map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator xobj = ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->lower_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_530_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator* pobj;
         map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator xobj = ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) G__getstructoffset())->upper_bound(*(string*) libp->para[0].ref);
         pobj = new map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > > G__TmaplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR;
static int G__Dict_530_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) (soff+(sizeof(map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >)*i)))->~G__TmaplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*) (soff))->~G__TmaplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<tbeam::Track,allocator<tbeam::Track> > */
static int G__Dict_536_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<tbeam::Track,allocator<tbeam::Track> >::reference obj = ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->at((vector<tbeam::Track,allocator<tbeam::Track> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::Track,allocator<tbeam::Track> >::const_reference obj = ((const vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->at((vector<tbeam::Track,allocator<tbeam::Track> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::Track,allocator<tbeam::Track> >::iterator* pobj;
         vector<tbeam::Track,allocator<tbeam::Track> >::iterator xobj = ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->begin();
         pobj = new vector<tbeam::Track,allocator<tbeam::Track> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::Track,allocator<tbeam::Track> >::iterator* pobj;
         vector<tbeam::Track,allocator<tbeam::Track> >::iterator xobj = ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->end();
         pobj = new vector<tbeam::Track,allocator<tbeam::Track> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::Track,allocator<tbeam::Track> >::reverse_iterator* pobj;
         vector<tbeam::Track,allocator<tbeam::Track> >::reverse_iterator xobj = ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->rbegin();
         pobj = new vector<tbeam::Track,allocator<tbeam::Track> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::Track,allocator<tbeam::Track> >::reverse_iterator* pobj;
         vector<tbeam::Track,allocator<tbeam::Track> >::reverse_iterator xobj = ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->rend();
         pobj = new vector<tbeam::Track,allocator<tbeam::Track> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->resize((vector<tbeam::Track,allocator<tbeam::Track> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->resize((vector<tbeam::Track,allocator<tbeam::Track> >::size_type) G__int(libp->para[0]), *((tbeam::Track*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<tbeam::Track,allocator<tbeam::Track> >::reference obj = ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->operator[]((vector<tbeam::Track,allocator<tbeam::Track> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::Track,allocator<tbeam::Track> >::const_reference obj = ((const vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->operator[]((vector<tbeam::Track,allocator<tbeam::Track> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tbeam::Track,allocator<tbeam::Track> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tbeam::Track,allocator<tbeam::Track> >[n];
     } else {
       p = new((void*) gvp) vector<tbeam::Track,allocator<tbeam::Track> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tbeam::Track,allocator<tbeam::Track> >;
     } else {
       p = new((void*) gvp) vector<tbeam::Track,allocator<tbeam::Track> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tbeam::Track,allocator<tbeam::Track> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tbeam::Track,allocator<tbeam::Track> >((vector<tbeam::Track,allocator<tbeam::Track> >::size_type) G__int(libp->para[0]), *(tbeam::Track*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<tbeam::Track,allocator<tbeam::Track> >((vector<tbeam::Track,allocator<tbeam::Track> >::size_type) G__int(libp->para[0]), *(tbeam::Track*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<tbeam::Track,allocator<tbeam::Track> >((vector<tbeam::Track,allocator<tbeam::Track> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<tbeam::Track,allocator<tbeam::Track> >((vector<tbeam::Track,allocator<tbeam::Track> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tbeam::Track,allocator<tbeam::Track> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<tbeam::Track,allocator<tbeam::Track> >(*(vector<tbeam::Track,allocator<tbeam::Track> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<tbeam::Track,allocator<tbeam::Track> >(*(vector<tbeam::Track,allocator<tbeam::Track> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<tbeam::Track,allocator<tbeam::Track> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<tbeam::Track,allocator<tbeam::Track> >(*((vector<tbeam::Track,allocator<tbeam::Track> >::const_iterator*) G__int(libp->para[0])), *((vector<tbeam::Track,allocator<tbeam::Track> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<tbeam::Track,allocator<tbeam::Track> >(*((vector<tbeam::Track,allocator<tbeam::Track> >::const_iterator*) G__int(libp->para[0])), *((vector<tbeam::Track,allocator<tbeam::Track> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<tbeam::Track,allocator<tbeam::Track> >& obj = ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->operator=(*(vector<tbeam::Track,allocator<tbeam::Track> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->reserve((vector<tbeam::Track,allocator<tbeam::Track> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const tbeam::Track& obj = ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const tbeam::Track& obj = ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->push_back(*(tbeam::Track*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->swap(*(vector<tbeam::Track,allocator<tbeam::Track> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<tbeam::Track,allocator<tbeam::Track> >::iterator* pobj;
         vector<tbeam::Track,allocator<tbeam::Track> >::iterator xobj = ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->insert(*((vector<tbeam::Track,allocator<tbeam::Track> >::iterator*) G__int(libp->para[0])), *(tbeam::Track*) libp->para[1].ref);
         pobj = new vector<tbeam::Track,allocator<tbeam::Track> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->insert(*((vector<tbeam::Track,allocator<tbeam::Track> >::iterator*) G__int(libp->para[0])), *((vector<tbeam::Track,allocator<tbeam::Track> >::const_iterator*) G__int(libp->para[1]))
, *((vector<tbeam::Track,allocator<tbeam::Track> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->insert(*((vector<tbeam::Track,allocator<tbeam::Track> >::iterator*) G__int(libp->para[0])), (vector<tbeam::Track,allocator<tbeam::Track> >::size_type) G__int(libp->para[1])
, *(tbeam::Track*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->erase(*((vector<tbeam::Track,allocator<tbeam::Track> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->erase(*((vector<tbeam::Track,allocator<tbeam::Track> >::iterator*) G__int(libp->para[0])), *((vector<tbeam::Track,allocator<tbeam::Track> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Dict_536_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<tbeam::Track,allocator<tbeam::Track> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<tbeam::Track,allocator<tbeam::Track> > G__TvectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR;
static int G__Dict_536_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<tbeam::Track,allocator<tbeam::Track> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<tbeam::Track,allocator<tbeam::Track> >*) (soff+(sizeof(vector<tbeam::Track,allocator<tbeam::Track> >)*i)))->~G__TvectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<tbeam::Track,allocator<tbeam::Track> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<tbeam::Track,allocator<tbeam::Track> >*) (soff))->~G__TvectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* tbeam::cluster */

/* tbeam::stub */

/* tbeam::cbc */

/* tbeam::dutEvent */

/* map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > > */

/* vector<int,allocator<int> > */

/* map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > > */

/* vector<tbeam::stub*,allocator<tbeam::stub*> > */

/* tbeam::condEvent */

/* tbeam::TelescopeEvent */

/* tbeam::FeIFourEvent */

/* tbeam::Track */

/* map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > > */

/* vector<tbeam::cluster,allocator<tbeam::cluster> > */

/* map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > > */

/* vector<tbeam::stub,allocator<tbeam::stub> > */

/* map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > > */

/* vector<tbeam::Track,allocator<tbeam::Track> > */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDict {
 public:
  G__Sizep2memfuncDict(): p(&G__Sizep2memfuncDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDict::*p)();
};

size_t G__get_sizep2memfuncDict()
{
  G__Sizep2memfuncDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster))) {
     tbeam::cluster *G__Lderived;
     G__Lderived=(tbeam::cluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster),G__get_linked_tagnum(&G__DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub))) {
     tbeam::stub *G__Lderived;
     G__Lderived=(tbeam::stub*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub),G__get_linked_tagnum(&G__DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DictLN_tbeamcLcLcbc))) {
     tbeam::cbc *G__Lderived;
     G__Lderived=(tbeam::cbc*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLcbc),G__get_linked_tagnum(&G__DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DictLN_tbeamcLcLdutEvent))) {
     tbeam::dutEvent *G__Lderived;
     G__Lderived=(tbeam::dutEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLdutEvent),G__get_linked_tagnum(&G__DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DictLN_tbeamcLcLcondEvent))) {
     tbeam::condEvent *G__Lderived;
     G__Lderived=(tbeam::condEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLcondEvent),G__get_linked_tagnum(&G__DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DictLN_tbeamcLcLTelescopeEvent))) {
     tbeam::TelescopeEvent *G__Lderived;
     G__Lderived=(tbeam::TelescopeEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLTelescopeEvent),G__get_linked_tagnum(&G__DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DictLN_tbeamcLcLFeIFourEvent))) {
     tbeam::FeIFourEvent *G__Lderived;
     G__Lderived=(tbeam::FeIFourEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLFeIFourEvent),G__get_linked_tagnum(&G__DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack))) {
     tbeam::Track *G__Lderived;
     G__Lderived=(tbeam::Track*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack),G__get_linked_tagnum(&G__DictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("value_type",114,-1,0,G__get_linked_tagnum(&G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",82,-1,0,G__get_linked_tagnum(&G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",82,-1,256,G__get_linked_tagnum(&G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",114,-1,1,G__get_linked_tagnum(&G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",114,-1,257,G__get_linked_tagnum(&G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G__DictLN_string),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",105,-1,0,G__get_linked_tagnum(&G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DictLN_pairlEstringcOintgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__DictLN_lesslEstringgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__DictLN_allocatorlEpairlEconstsPstringcOintgRsPgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<tbeam::cluster*>",117,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<tbeam::cluster*> >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<tbeam::cluster*> >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G__DictLN_string),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",117,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DictLN_pairlEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__DictLN_lesslEstringgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string> >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",105,-1,0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",73,-1,0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",73,-1,256,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",105,-1,1,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",105,-1,257,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<int> >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<int> >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G__DictLN_string),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",117,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DictLN_pairlEstringcOvectorlEintcOallocatorlEintgRsPgRsPgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__DictLN_lesslEstringgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<int,allocator<int> >,less<string> >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<tbeam::stub*>",117,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",85,G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub),256,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",85,G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub),1,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",85,G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub),257,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<tbeam::cbc>",117,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLcbccOallocatorlEtbeamcLcLcbcgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLcbccOallocatorlEtbeamcLcLcbcgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLcbccOallocatorlEtbeamcLcLcbcgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLcbccOallocatorlEtbeamcLcLcbcgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLcbccOallocatorlEtbeamcLcLcbcgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<double> >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<double> >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G__DictLN_string),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",117,G__get_linked_tagnum(&G__DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DictLN_pairlEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__DictLN_lesslEstringgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<double,allocator<double> > >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<double,allocator<double> >,less<string> >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,int>",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,int>",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<tbeam::cluster>",117,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster),256,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster),1,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster),257,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<tbeam::cluster> >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<tbeam::cluster> >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G__DictLN_string),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",117,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DictLN_pairlEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__DictLN_lesslEstringgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<tbeam::cluster,allocator<tbeam::cluster> > >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string> >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<tbeam::stub>",117,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub),256,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub),1,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub),257,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,std::vector<unsigned short> >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,std::vector<unsigned short> >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",117,G__get_linked_tagnum(&G__DictLN_string),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",117,G__get_linked_tagnum(&G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DictLN_pairlEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__DictLN_lesslEstringgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<unsigned short,allocator<unsigned short> > >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,vector<unsigned short,allocator<unsigned short> >,less<string> >",117,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<tbeam::Track>",117,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack),256,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack),1,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack),257,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* tbeam::cluster */
static void G__setup_memvartbeamcLcLcluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster));
   { tbeam::cluster *p; p=(tbeam::cluster*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),114,0,0,-1,G__defined_typename("uint16_t"),-1,1,"x=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->size)-(long)(p)),114,0,0,-1,G__defined_typename("uint16_t"),-1,1,"size=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* tbeam::stub */
static void G__setup_memvartbeamcLcLstub(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub));
   { tbeam::stub *p; p=(tbeam::stub*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->seeding)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster),-1,-1,1,"seeding=",0,"Bottom sensor cluster");
   G__memvar_setup((void*)((long)(&p->matched)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster),-1,-1,1,"matched=",0,"Top sensor cluster");
   G__memvar_setup((void*)((long)(&p->x)-(long)(p)),114,0,0,-1,G__defined_typename("uint16_t"),-1,1,"x=",0,"Position of the stub (bottom sensor)");
   G__memvar_setup((void*)((long)(&p->direction)-(long)(p)),115,0,0,-1,G__defined_typename("int16_t"),-1,1,"direction=",0,"Direction of the stub (cl0-cl1)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* tbeam::cbc */
static void G__setup_memvartbeamcLcLcbc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLcbc));
   { tbeam::cbc *p; p=(tbeam::cbc*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pipelineAdd)-(long)(p)),114,0,0,-1,G__defined_typename("uint16_t"),-1,1,"pipelineAdd=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->status)-(long)(p)),98,0,0,-1,G__defined_typename("uint8_t"),-1,1,"status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->error)-(long)(p)),98,0,0,-1,G__defined_typename("uint8_t"),-1,1,"error=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* tbeam::dutEvent */
static void G__setup_memvartbeamcLcLdutEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLdutEvent));
   { tbeam::dutEvent *p; p=(tbeam::dutEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->clusters)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<std::string,std::vector<tbeam::cluster*> >"),-1,1,"clusters=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dut_channel)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),G__defined_typename("map<std::string,std::vector<int> >"),-1,1,"dut_channel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dut_row)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),G__defined_typename("map<std::string,std::vector<int> >"),-1,1,"dut_row=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stubs)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR),G__defined_typename("vector<tbeam::stub*>"),-1,1,"stubs=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stubWord)-(long)(p)),104,0,0,-1,G__defined_typename("uint32_t"),-1,1,"stubWord=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stubWordReco)-(long)(p)),104,0,0,-1,G__defined_typename("uint32_t"),-1,1,"stubWordReco=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > > */
static void G__setup_memvarmaplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR));
   { map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > > *p; p=(map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<int,allocator<int> > */
static void G__setup_memvarvectorlEintcOallocatorlEintgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   { vector<int,allocator<int> > *p; p=(vector<int,allocator<int> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > > */
static void G__setup_memvarmaplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR));
   { map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > > *p; p=(map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<tbeam::stub*,allocator<tbeam::stub*> > */
static void G__setup_memvarvectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR));
   { vector<tbeam::stub*,allocator<tbeam::stub*> > *p; p=(vector<tbeam::stub*,allocator<tbeam::stub*> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* tbeam::condEvent */
static void G__setup_memvartbeamcLcLcondEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLcondEvent));
   { tbeam::condEvent *p; p=(tbeam::condEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->run)-(long)(p)),104,0,0,-1,-1,-1,1,"run=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lumiSection)-(long)(p)),104,0,0,-1,-1,-1,1,"lumiSection=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->event)-(long)(p)),104,0,0,-1,-1,-1,1,"event=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->time)-(long)(p)),109,0,0,-1,-1,-1,1,"time=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->unixtime)-(long)(p)),107,0,0,-1,-1,-1,1,"unixtime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tdcPhase)-(long)(p)),104,0,0,-1,-1,-1,1,"tdcPhase=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->HVsettings)-(long)(p)),104,0,0,-1,-1,-1,1,"HVsettings=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DUTangle)-(long)(p)),104,0,0,-1,-1,-1,1,"DUTangle=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->window)-(long)(p)),104,0,0,-1,G__defined_typename("uint32_t"),-1,1,"window=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->offset)-(long)(p)),104,0,0,-1,G__defined_typename("uint32_t"),-1,1,"offset=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cwd)-(long)(p)),104,0,0,-1,G__defined_typename("uint32_t"),-1,1,"cwd=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tilt)-(long)(p)),104,0,0,-1,G__defined_typename("uint32_t"),-1,1,"tilt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->vcth)-(long)(p)),104,0,0,-1,G__defined_typename("uint32_t"),-1,1,"vcth=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->stubLatency)-(long)(p)),104,0,0,-1,G__defined_typename("uint32_t"),-1,1,"stubLatency=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->triggerLatency)-(long)(p)),104,0,0,-1,G__defined_typename("uint32_t"),-1,1,"triggerLatency=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->condData)-(long)(p)),105,0,0,-1,-1,-1,1,"condData=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->glibStatus)-(long)(p)),105,0,0,-1,-1,-1,1,"glibStatus=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->cbcs)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLcbccOallocatorlEtbeamcLcLcbcgRsPgR),G__defined_typename("vector<tbeam::cbc>"),-1,1,"cbcs=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* tbeam::TelescopeEvent */
static void G__setup_memvartbeamcLcLTelescopeEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLTelescopeEvent));
   { tbeam::TelescopeEvent *p; p=(tbeam::TelescopeEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nTrackParams)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nTrackParams=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->euEvt)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"euEvt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xPos)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"xPos=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yPos)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"yPos=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxdz)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"dxdz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dydz)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"dydz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackNum)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"trackNum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iden)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"iden=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"chi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndof)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"ndof=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* tbeam::FeIFourEvent */
static void G__setup_memvartbeamcLcLFeIFourEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLFeIFourEvent));
   { tbeam::FeIFourEvent *p; p=(tbeam::FeIFourEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->nPixHits)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nPixHits=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->euEvt)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"euEvt=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->col)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"col=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->row)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"row=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->tot)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"tot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lv1)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"lv1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iden)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"iden=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hitTime)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"hitTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->frameTime)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,1,"frameTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* tbeam::Track */
static void G__setup_memvartbeamcLcLTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack));
   { tbeam::Track *p; p=(tbeam::Track*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->trkIndex)-(long)(p)),105,0,0,-1,-1,-1,1,"trkIndex=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xPos)-(long)(p)),100,0,0,-1,-1,-1,1,"xPos=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->yPos)-(long)(p)),100,0,0,-1,-1,-1,1,"yPos=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dxdz)-(long)(p)),100,0,0,-1,-1,-1,1,"dxdz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->dydz)-(long)(p)),100,0,0,-1,-1,-1,1,"dydz=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chi2)-(long)(p)),100,0,0,-1,-1,-1,1,"chi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndof)-(long)(p)),100,0,0,-1,-1,-1,1,"ndof=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > > */
static void G__setup_memvarmaplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR));
   { map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > > *p; p=(map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<tbeam::cluster,allocator<tbeam::cluster> > */
static void G__setup_memvarvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR));
   { vector<tbeam::cluster,allocator<tbeam::cluster> > *p; p=(vector<tbeam::cluster,allocator<tbeam::cluster> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > > */
static void G__setup_memvarmaplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR));
   { map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > > *p; p=(map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<tbeam::stub,allocator<tbeam::stub> > */
static void G__setup_memvarvectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR));
   { vector<tbeam::stub,allocator<tbeam::stub> > *p; p=(vector<tbeam::stub,allocator<tbeam::stub> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > > */
static void G__setup_memvarmaplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR));
   { map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > > *p; p=(map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<tbeam::Track,allocator<tbeam::Track> > */
static void G__setup_memvarvectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR));
   { vector<tbeam::Track,allocator<tbeam::Track> > *p; p=(vector<tbeam::Track,allocator<tbeam::Track> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfunctbeamcLcLcluster(void) {
   /* tbeam::cluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster));
   G__memfunc_setup("cluster",770,G__Dict_468_0_1, 105, G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__Dict_468_0_2, 85, G__get_linked_tagnum(&G__DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&tbeam::cluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__Dict_468_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::cluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__Dict_468_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&tbeam::cluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__Dict_468_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&tbeam::cluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__Dict_468_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__Dict_468_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::cluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__Dict_468_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tbeam::cluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__Dict_468_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::cluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__Dict_468_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tbeam::cluster::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("cluster", 770, G__Dict_468_0_14, (int) ('i'), G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster), -1, 0, 1, 1, 1, 0, "u 'tbeam::cluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~cluster", 896, G__Dict_468_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Dict_468_0_16, (int) ('u'), G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster), -1, 1, 1, 1, 1, 0, "u 'tbeam::cluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctbeamcLcLstub(void) {
   /* tbeam::stub */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub));
   G__memfunc_setup("stub",446,G__Dict_469_0_1, 105, G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("stub",446,G__Dict_469_0_2, 105, G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub), -1, 0, 1, 1, 1, 0, "u 'tbeam::stub' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__Dict_469_0_3, 85, G__get_linked_tagnum(&G__DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&tbeam::stub::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__Dict_469_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::stub::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__Dict_469_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&tbeam::stub::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__Dict_469_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&tbeam::stub::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__Dict_469_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__Dict_469_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::stub::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__Dict_469_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tbeam::stub::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__Dict_469_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::stub::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__Dict_469_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tbeam::stub::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~stub", 572, G__Dict_469_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Dict_469_0_16, (int) ('u'), G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub), -1, 1, 1, 1, 1, 0, "u 'tbeam::stub' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctbeamcLcLcbc(void) {
   /* tbeam::cbc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLcbc));
   G__memfunc_setup("cbc",296,G__Dict_470_0_1, 105, G__get_linked_tagnum(&G__DictLN_tbeamcLcLcbc), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__Dict_470_0_2, 85, G__get_linked_tagnum(&G__DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&tbeam::cbc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__Dict_470_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::cbc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__Dict_470_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&tbeam::cbc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__Dict_470_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&tbeam::cbc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__Dict_470_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__Dict_470_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::cbc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__Dict_470_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tbeam::cbc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__Dict_470_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::cbc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__Dict_470_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tbeam::cbc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("cbc", 296, G__Dict_470_0_14, (int) ('i'), G__get_linked_tagnum(&G__DictLN_tbeamcLcLcbc), -1, 0, 1, 1, 1, 0, "u 'tbeam::cbc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~cbc", 422, G__Dict_470_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Dict_470_0_16, (int) ('u'), G__get_linked_tagnum(&G__DictLN_tbeamcLcLcbc), -1, 1, 1, 1, 1, 0, "u 'tbeam::cbc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctbeamcLcLdutEvent(void) {
   /* tbeam::dutEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLdutEvent));
   G__memfunc_setup("dutEvent",847,G__Dict_471_0_1, 105, G__get_linked_tagnum(&G__DictLN_tbeamcLcLdutEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dutEvent",847,G__Dict_471_0_2, 105, G__get_linked_tagnum(&G__DictLN_tbeamcLcLdutEvent), -1, 0, 1, 1, 1, 0, "u 'tbeam::dutEvent' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__Dict_471_0_3, 85, G__get_linked_tagnum(&G__DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&tbeam::dutEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__Dict_471_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::dutEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__Dict_471_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&tbeam::dutEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__Dict_471_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&tbeam::dutEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__Dict_471_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__Dict_471_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::dutEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__Dict_471_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tbeam::dutEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__Dict_471_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::dutEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__Dict_471_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tbeam::dutEvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~dutEvent", 973, G__Dict_471_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Dict_471_0_16, (int) ('u'), G__get_linked_tagnum(&G__DictLN_tbeamcLcLdutEvent), -1, 1, 1, 1, 1, 0, "u 'tbeam::dutEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR(void) {
   /* map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR));
   G__memfunc_setup("map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >",15154,G__Dict_478_0_1, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >",15154,G__Dict_478_0_2, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator' - 0 - first u 'map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >",15154,G__Dict_478_0_3, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::reverse_iterator' - 0 - first u 'map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >",15154,G__Dict_478_0_4, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__Dict_478_0_5, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__Dict_478_0_6, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__Dict_478_0_7, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__Dict_478_0_8, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__Dict_478_0_9, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__Dict_478_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__Dict_478_0_11, 107, -1, G__defined_typename("map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__Dict_478_0_12, 107, -1, G__defined_typename("map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__Dict_478_0_13, 117, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_478_0_14, 117, G__get_linked_tagnum(&G__DictLN_pairlEmaplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > >' 'map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_478_0_15, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator' - 0 - position u 'pair<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > >' 'map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_478_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator' - 0 - first u 'map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_478_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::reverse_iterator' - 0 - first u 'map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_478_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_478_0_19, 107, -1, G__defined_typename("map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::size_type"), 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_478_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator' - 0 - first u 'map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__Dict_478_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__Dict_478_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__Dict_478_0_23, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__Dict_478_0_24, 107, -1, G__defined_typename("map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::size_type"), 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__Dict_478_0_25, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__Dict_478_0_26, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >", 15280, G__Dict_478_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEintcOallocatorlEintgRsPgR(void) {
   /* vector<int,allocator<int> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__memfunc_setup("at",213,G__Dict_484_0_1, 105, -1, G__defined_typename("vector<int,allocator<int> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__Dict_484_0_2, 105, -1, G__defined_typename("vector<int,allocator<int> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__Dict_484_0_3, 117, G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__Dict_484_0_4, 117, G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__Dict_484_0_5, 117, G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR), G__defined_typename("vector<int,allocator<int> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__Dict_484_0_6, 117, G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR), G__defined_typename("vector<int,allocator<int> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__Dict_484_0_7, 107, -1, G__defined_typename("vector<int,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__Dict_484_0_8, 107, -1, G__defined_typename("vector<int,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__Dict_484_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<int,allocator<int> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__Dict_484_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<int,allocator<int> >::size_type' 0 - sz i - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__Dict_484_0_11, 107, -1, G__defined_typename("vector<int,allocator<int> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__Dict_484_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__Dict_484_0_13, 105, -1, G__defined_typename("vector<int,allocator<int> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__Dict_484_0_14, 105, -1, G__defined_typename("vector<int,allocator<int> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__Dict_484_0_15, 105, G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__Dict_484_0_16, 105, G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<int,allocator<int> >::size_type' 0 - n i - - 11 'int()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__Dict_484_0_17, 105, G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<int,allocator<int> >",2602,G__Dict_484_0_18, 105, G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - first u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__Dict_484_0_19, 117, G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__Dict_484_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<int,allocator<int> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__Dict_484_0_21, 105, -1, -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__Dict_484_0_22, 105, -1, -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__Dict_484_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__Dict_484_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_484_0_25, 117, G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - position i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_484_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - position u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - first "
"u 'vector<int,allocator<int> >::iterator' 'vector<int,allocator<int> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_484_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - position k - 'vector<int,allocator<int> >::size_type' 0 - n "
"i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__Dict_484_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_484_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<int,allocator<int> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_484_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<int,allocator<int> >::iterator' - 0 - first u 'vector<int,allocator<int> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__Dict_484_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<int,allocator<int> >", 2728, G__Dict_484_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR(void) {
   /* map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR));
   G__memfunc_setup("map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >",10682,G__Dict_489_0_1, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >",10682,G__Dict_489_0_2, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator' - 0 - first u 'map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >",10682,G__Dict_489_0_3, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::reverse_iterator' - 0 - first u 'map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >",10682,G__Dict_489_0_4, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__Dict_489_0_5, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__Dict_489_0_6, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__Dict_489_0_7, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__Dict_489_0_8, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__Dict_489_0_9, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__Dict_489_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__Dict_489_0_11, 107, -1, G__defined_typename("map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__Dict_489_0_12, 107, -1, G__defined_typename("map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__Dict_489_0_13, 117, G__get_linked_tagnum(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR), -1, 1, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_489_0_14, 117, G__get_linked_tagnum(&G__DictLN_pairlEmaplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,vector<int,allocator<int> > >' 'map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_489_0_15, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator' - 0 - position u 'pair<string,vector<int,allocator<int> > >' 'map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_489_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator' - 0 - first u 'map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_489_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::reverse_iterator' - 0 - first u 'map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_489_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_489_0_19, 107, -1, G__defined_typename("map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::size_type"), 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_489_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator' - 0 - first u 'map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__Dict_489_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__Dict_489_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__Dict_489_0_23, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__Dict_489_0_24, 107, -1, G__defined_typename("map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::size_type"), 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__Dict_489_0_25, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__Dict_489_0_26, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >", 10808, G__Dict_489_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR(void) {
   /* vector<tbeam::stub*,allocator<tbeam::stub*> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR));
   G__memfunc_setup("at",213,G__Dict_495_0_1, 85, G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub), G__defined_typename("vector<tbeam::stub*,allocator<tbeam::stub*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__Dict_495_0_2, 85, G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub), G__defined_typename("vector<tbeam::stub*,allocator<tbeam::stub*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__Dict_495_0_3, 117, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__Dict_495_0_4, 117, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__Dict_495_0_5, 117, G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgRcLcLiteratorgR), G__defined_typename("vector<tbeam::stub*,allocator<tbeam::stub*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__Dict_495_0_6, 117, G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgRcLcLiteratorgR), G__defined_typename("vector<tbeam::stub*,allocator<tbeam::stub*> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__Dict_495_0_7, 107, -1, G__defined_typename("vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__Dict_495_0_8, 107, -1, G__defined_typename("vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__Dict_495_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__Dict_495_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type' 0 - sz U 'tbeam::stub' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__Dict_495_0_11, 107, -1, G__defined_typename("vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__Dict_495_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__Dict_495_0_13, 85, G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub), G__defined_typename("vector<tbeam::stub*,allocator<tbeam::stub*> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__Dict_495_0_14, 85, G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub), G__defined_typename("vector<tbeam::stub*,allocator<tbeam::stub*> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tbeam::stub*,allocator<tbeam::stub*> >",4190,G__Dict_495_0_15, 105, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tbeam::stub*,allocator<tbeam::stub*> >",4190,G__Dict_495_0_16, 105, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type' 0 - n U 'tbeam::stub' - 41 '(tbeam::stub*)()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tbeam::stub*,allocator<tbeam::stub*> >",4190,G__Dict_495_0_17, 105, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<tbeam::stub*,allocator<tbeam::stub*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tbeam::stub*,allocator<tbeam::stub*> >",4190,G__Dict_495_0_18, 105, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator' 'vector<tbeam::stub*,allocator<tbeam::stub*> >::const_iterator' 10 - first u 'vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator' 'vector<tbeam::stub*,allocator<tbeam::stub*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__Dict_495_0_19, 117, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<tbeam::stub*,allocator<tbeam::stub*> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__Dict_495_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__Dict_495_0_21, 85, G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__Dict_495_0_22, 85, G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__Dict_495_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'tbeam::stub' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__Dict_495_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<tbeam::stub*,allocator<tbeam::stub*> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_495_0_25, 117, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator' - 0 - position U 'tbeam::stub' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_495_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator' - 0 - position u 'vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator' 'vector<tbeam::stub*,allocator<tbeam::stub*> >::const_iterator' 10 - first "
"u 'vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator' 'vector<tbeam::stub*,allocator<tbeam::stub*> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_495_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator' - 0 - position k - 'vector<tbeam::stub*,allocator<tbeam::stub*> >::size_type' 0 - n "
"U 'tbeam::stub' - 41 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__Dict_495_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_495_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_495_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator' - 0 - first u 'vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__Dict_495_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<tbeam::stub*,allocator<tbeam::stub*> >", 4316, G__Dict_495_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctbeamcLcLcondEvent(void) {
   /* tbeam::condEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLcondEvent));
   G__memfunc_setup("condEvent",934,G__Dict_498_0_1, 105, G__get_linked_tagnum(&G__DictLN_tbeamcLcLcondEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__Dict_498_0_2, 85, G__get_linked_tagnum(&G__DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&tbeam::condEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__Dict_498_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::condEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__Dict_498_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&tbeam::condEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__Dict_498_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&tbeam::condEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__Dict_498_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__Dict_498_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::condEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__Dict_498_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tbeam::condEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__Dict_498_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::condEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__Dict_498_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tbeam::condEvent::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("condEvent", 934, G__Dict_498_0_14, (int) ('i'), G__get_linked_tagnum(&G__DictLN_tbeamcLcLcondEvent), -1, 0, 1, 1, 1, 0, "u 'tbeam::condEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~condEvent", 1060, G__Dict_498_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Dict_498_0_16, (int) ('u'), G__get_linked_tagnum(&G__DictLN_tbeamcLcLcondEvent), -1, 1, 1, 1, 1, 0, "u 'tbeam::condEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctbeamcLcLTelescopeEvent(void) {
   /* tbeam::TelescopeEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLTelescopeEvent));
   G__memfunc_setup("TelescopeEvent",1446,G__Dict_503_0_1, 105, G__get_linked_tagnum(&G__DictLN_tbeamcLcLTelescopeEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TelescopeEvent",1446,G__Dict_503_0_2, 105, G__get_linked_tagnum(&G__DictLN_tbeamcLcLTelescopeEvent), -1, 0, 1, 1, 1, 0, "u 'tbeam::TelescopeEvent' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__Dict_503_0_3, 85, G__get_linked_tagnum(&G__DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&tbeam::TelescopeEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__Dict_503_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::TelescopeEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__Dict_503_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&tbeam::TelescopeEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__Dict_503_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&tbeam::TelescopeEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__Dict_503_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__Dict_503_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::TelescopeEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__Dict_503_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tbeam::TelescopeEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__Dict_503_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::TelescopeEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__Dict_503_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tbeam::TelescopeEvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TelescopeEvent", 1572, G__Dict_503_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Dict_503_0_16, (int) ('u'), G__get_linked_tagnum(&G__DictLN_tbeamcLcLTelescopeEvent), -1, 1, 1, 1, 1, 0, "u 'tbeam::TelescopeEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctbeamcLcLFeIFourEvent(void) {
   /* tbeam::FeIFourEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLFeIFourEvent));
   G__memfunc_setup("FeIFourEvent",1170,G__Dict_504_0_1, 105, G__get_linked_tagnum(&G__DictLN_tbeamcLcLFeIFourEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FeIFourEvent",1170,G__Dict_504_0_2, 105, G__get_linked_tagnum(&G__DictLN_tbeamcLcLFeIFourEvent), -1, 0, 1, 1, 1, 0, "u 'tbeam::FeIFourEvent' - 11 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__Dict_504_0_3, 85, G__get_linked_tagnum(&G__DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&tbeam::FeIFourEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__Dict_504_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::FeIFourEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__Dict_504_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&tbeam::FeIFourEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__Dict_504_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&tbeam::FeIFourEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__Dict_504_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__Dict_504_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::FeIFourEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__Dict_504_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tbeam::FeIFourEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__Dict_504_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::FeIFourEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__Dict_504_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tbeam::FeIFourEvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FeIFourEvent", 1296, G__Dict_504_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Dict_504_0_16, (int) ('u'), G__get_linked_tagnum(&G__DictLN_tbeamcLcLFeIFourEvent), -1, 1, 1, 1, 1, 0, "u 'tbeam::FeIFourEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfunctbeamcLcLTrack(void) {
   /* tbeam::Track */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack));
   G__memfunc_setup("Track",501,G__Dict_505_0_1, 105, G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Track",501,G__Dict_505_0_2, 105, G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack), -1, 0, 7, 1, 1, 0, 
"i - - 0 - - d - - 0 - - "
"d - - 0 - - d - - 0 - - "
"d - - 0 - - d - - 0 - - "
"d - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Track",501,G__Dict_505_0_3, 105, G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack), -1, 0, 1, 1, 1, 0, "u 'tbeam::Track' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__Dict_505_0_4, 85, G__get_linked_tagnum(&G__DictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&tbeam::Track::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__Dict_505_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::Track::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__Dict_505_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&tbeam::Track::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__Dict_505_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&tbeam::Track::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__Dict_505_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__Dict_505_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::Track::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__Dict_505_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tbeam::Track::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__Dict_505_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&tbeam::Track::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__Dict_505_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&tbeam::Track::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Track", 627, G__Dict_505_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Dict_505_0_17, (int) ('u'), G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack), -1, 1, 1, 1, 1, 0, "u 'tbeam::Track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR(void) {
   /* map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR));
   G__memfunc_setup("map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >",11898,G__Dict_508_0_1, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >",11898,G__Dict_508_0_2, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator' - 0 - first u 'map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >",11898,G__Dict_508_0_3, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::reverse_iterator' - 0 - first u 'map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >",11898,G__Dict_508_0_4, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__Dict_508_0_5, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__Dict_508_0_6, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__Dict_508_0_7, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__Dict_508_0_8, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__Dict_508_0_9, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__Dict_508_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__Dict_508_0_11, 107, -1, G__defined_typename("map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__Dict_508_0_12, 107, -1, G__defined_typename("map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__Dict_508_0_13, 117, G__get_linked_tagnum(&G__DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR), -1, 1, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_508_0_14, 117, G__get_linked_tagnum(&G__DictLN_pairlEmaplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,vector<double,allocator<double> > >' 'map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_508_0_15, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator' - 0 - position u 'pair<string,vector<double,allocator<double> > >' 'map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_508_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator' - 0 - first u 'map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_508_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::reverse_iterator' - 0 - first u 'map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_508_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_508_0_19, 107, -1, G__defined_typename("map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::size_type"), 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_508_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator' - 0 - first u 'map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__Dict_508_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__Dict_508_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__Dict_508_0_23, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__Dict_508_0_24, 107, -1, G__defined_typename("map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::size_type"), 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__Dict_508_0_25, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__Dict_508_0_26, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >", 12024, G__Dict_508_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR(void) {
   /* vector<tbeam::cluster,allocator<tbeam::cluster> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR));
   G__memfunc_setup("at",213,G__Dict_514_0_1, 117, G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster), G__defined_typename("vector<tbeam::cluster,allocator<tbeam::cluster> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__Dict_514_0_2, 117, G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster), G__defined_typename("vector<tbeam::cluster,allocator<tbeam::cluster> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__Dict_514_0_3, 117, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__Dict_514_0_4, 117, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__Dict_514_0_5, 117, G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcLcLiteratorgR), G__defined_typename("vector<tbeam::cluster,allocator<tbeam::cluster> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__Dict_514_0_6, 117, G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcLcLiteratorgR), G__defined_typename("vector<tbeam::cluster,allocator<tbeam::cluster> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__Dict_514_0_7, 107, -1, G__defined_typename("vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__Dict_514_0_8, 107, -1, G__defined_typename("vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__Dict_514_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__Dict_514_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type' 0 - sz u 'tbeam::cluster' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__Dict_514_0_11, 107, -1, G__defined_typename("vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__Dict_514_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__Dict_514_0_13, 117, G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster), G__defined_typename("vector<tbeam::cluster,allocator<tbeam::cluster> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__Dict_514_0_14, 117, G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster), G__defined_typename("vector<tbeam::cluster,allocator<tbeam::cluster> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tbeam::cluster,allocator<tbeam::cluster> >",4754,G__Dict_514_0_15, 105, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tbeam::cluster,allocator<tbeam::cluster> >",4754,G__Dict_514_0_16, 105, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type' 0 - n u 'tbeam::cluster' - 11 'tbeam::cluster()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tbeam::cluster,allocator<tbeam::cluster> >",4754,G__Dict_514_0_17, 105, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<tbeam::cluster,allocator<tbeam::cluster> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tbeam::cluster,allocator<tbeam::cluster> >",4754,G__Dict_514_0_18, 105, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator' 'vector<tbeam::cluster,allocator<tbeam::cluster> >::const_iterator' 10 - first u 'vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator' 'vector<tbeam::cluster,allocator<tbeam::cluster> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__Dict_514_0_19, 117, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<tbeam::cluster,allocator<tbeam::cluster> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__Dict_514_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__Dict_514_0_21, 117, G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__Dict_514_0_22, 117, G__get_linked_tagnum(&G__DictLN_tbeamcLcLcluster), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__Dict_514_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'tbeam::cluster' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__Dict_514_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<tbeam::cluster,allocator<tbeam::cluster> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_514_0_25, 117, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator' - 0 - position u 'tbeam::cluster' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_514_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator' - 0 - position u 'vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator' 'vector<tbeam::cluster,allocator<tbeam::cluster> >::const_iterator' 10 - first "
"u 'vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator' 'vector<tbeam::cluster,allocator<tbeam::cluster> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_514_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator' - 0 - position k - 'vector<tbeam::cluster,allocator<tbeam::cluster> >::size_type' 0 - n "
"u 'tbeam::cluster' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__Dict_514_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_514_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_514_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator' - 0 - first u 'vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__Dict_514_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<tbeam::cluster,allocator<tbeam::cluster> >", 4880, G__Dict_514_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR(void) {
   /* map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR));
   G__memfunc_setup("map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >",14986,G__Dict_519_0_1, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >",14986,G__Dict_519_0_2, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator' - 0 - first u 'map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >",14986,G__Dict_519_0_3, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::reverse_iterator' - 0 - first u 'map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >",14986,G__Dict_519_0_4, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__Dict_519_0_5, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__Dict_519_0_6, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__Dict_519_0_7, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__Dict_519_0_8, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__Dict_519_0_9, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__Dict_519_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__Dict_519_0_11, 107, -1, G__defined_typename("map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__Dict_519_0_12, 107, -1, G__defined_typename("map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__Dict_519_0_13, 117, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR), -1, 1, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_519_0_14, 117, G__get_linked_tagnum(&G__DictLN_pairlEmaplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,vector<tbeam::cluster,allocator<tbeam::cluster> > >' 'map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_519_0_15, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator' - 0 - position u 'pair<string,vector<tbeam::cluster,allocator<tbeam::cluster> > >' 'map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_519_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator' - 0 - first u 'map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_519_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::reverse_iterator' - 0 - first u 'map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_519_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_519_0_19, 107, -1, G__defined_typename("map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::size_type"), 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_519_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator' - 0 - first u 'map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__Dict_519_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__Dict_519_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__Dict_519_0_23, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__Dict_519_0_24, 107, -1, G__defined_typename("map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::size_type"), 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__Dict_519_0_25, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__Dict_519_0_26, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >", 15112, G__Dict_519_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR(void) {
   /* vector<tbeam::stub,allocator<tbeam::stub> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR));
   G__memfunc_setup("at",213,G__Dict_525_0_1, 117, G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub), G__defined_typename("vector<tbeam::stub,allocator<tbeam::stub> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<tbeam::stub,allocator<tbeam::stub> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__Dict_525_0_2, 117, G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub), G__defined_typename("vector<tbeam::stub,allocator<tbeam::stub> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<tbeam::stub,allocator<tbeam::stub> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__Dict_525_0_3, 117, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__Dict_525_0_4, 117, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__Dict_525_0_5, 117, G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgRcLcLiteratorgR), G__defined_typename("vector<tbeam::stub,allocator<tbeam::stub> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__Dict_525_0_6, 117, G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgRcLcLiteratorgR), G__defined_typename("vector<tbeam::stub,allocator<tbeam::stub> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__Dict_525_0_7, 107, -1, G__defined_typename("vector<tbeam::stub,allocator<tbeam::stub> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__Dict_525_0_8, 107, -1, G__defined_typename("vector<tbeam::stub,allocator<tbeam::stub> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__Dict_525_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<tbeam::stub,allocator<tbeam::stub> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__Dict_525_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<tbeam::stub,allocator<tbeam::stub> >::size_type' 0 - sz u 'tbeam::stub' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__Dict_525_0_11, 107, -1, G__defined_typename("vector<tbeam::stub,allocator<tbeam::stub> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__Dict_525_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__Dict_525_0_13, 117, G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub), G__defined_typename("vector<tbeam::stub,allocator<tbeam::stub> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<tbeam::stub,allocator<tbeam::stub> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__Dict_525_0_14, 117, G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub), G__defined_typename("vector<tbeam::stub,allocator<tbeam::stub> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<tbeam::stub,allocator<tbeam::stub> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tbeam::stub,allocator<tbeam::stub> >",4106,G__Dict_525_0_15, 105, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tbeam::stub,allocator<tbeam::stub> >",4106,G__Dict_525_0_16, 105, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<tbeam::stub,allocator<tbeam::stub> >::size_type' 0 - n u 'tbeam::stub' - 11 'tbeam::stub()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tbeam::stub,allocator<tbeam::stub> >",4106,G__Dict_525_0_17, 105, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<tbeam::stub,allocator<tbeam::stub> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tbeam::stub,allocator<tbeam::stub> >",4106,G__Dict_525_0_18, 105, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<tbeam::stub,allocator<tbeam::stub> >::iterator' 'vector<tbeam::stub,allocator<tbeam::stub> >::const_iterator' 10 - first u 'vector<tbeam::stub,allocator<tbeam::stub> >::iterator' 'vector<tbeam::stub,allocator<tbeam::stub> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__Dict_525_0_19, 117, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<tbeam::stub,allocator<tbeam::stub> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__Dict_525_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<tbeam::stub,allocator<tbeam::stub> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__Dict_525_0_21, 117, G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__Dict_525_0_22, 117, G__get_linked_tagnum(&G__DictLN_tbeamcLcLstub), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__Dict_525_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'tbeam::stub' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__Dict_525_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<tbeam::stub,allocator<tbeam::stub> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_525_0_25, 117, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<tbeam::stub,allocator<tbeam::stub> >::iterator' - 0 - position u 'tbeam::stub' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_525_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<tbeam::stub,allocator<tbeam::stub> >::iterator' - 0 - position u 'vector<tbeam::stub,allocator<tbeam::stub> >::iterator' 'vector<tbeam::stub,allocator<tbeam::stub> >::const_iterator' 10 - first "
"u 'vector<tbeam::stub,allocator<tbeam::stub> >::iterator' 'vector<tbeam::stub,allocator<tbeam::stub> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_525_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<tbeam::stub,allocator<tbeam::stub> >::iterator' - 0 - position k - 'vector<tbeam::stub,allocator<tbeam::stub> >::size_type' 0 - n "
"u 'tbeam::stub' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__Dict_525_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_525_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<tbeam::stub,allocator<tbeam::stub> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_525_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<tbeam::stub,allocator<tbeam::stub> >::iterator' - 0 - first u 'vector<tbeam::stub,allocator<tbeam::stub> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__Dict_525_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<tbeam::stub,allocator<tbeam::stub> >", 4232, G__Dict_525_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR(void) {
   /* map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR));
   G__memfunc_setup("map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >",15170,G__Dict_530_0_1, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >",15170,G__Dict_530_0_2, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator' - 0 - first u 'map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >",15170,G__Dict_530_0_3, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::reverse_iterator' - 0 - first u 'map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >",15170,G__Dict_530_0_4, 105, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__Dict_530_0_5, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__Dict_530_0_6, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__Dict_530_0_7, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__Dict_530_0_8, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__Dict_530_0_9, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__Dict_530_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__Dict_530_0_11, 107, -1, G__defined_typename("map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__Dict_530_0_12, 107, -1, G__defined_typename("map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__Dict_530_0_13, 117, G__get_linked_tagnum(&G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR), -1, 1, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_530_0_14, 117, G__get_linked_tagnum(&G__DictLN_pairlEmaplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<string,vector<unsigned short,allocator<unsigned short> > >' 'map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_530_0_15, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator' - 0 - position u 'pair<string,vector<unsigned short,allocator<unsigned short> > >' 'map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_530_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator' - 0 - first u 'map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_530_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::reverse_iterator' - 0 - first u 'map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_530_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_530_0_19, 107, -1, G__defined_typename("map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::size_type"), 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_530_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator' - 0 - first u 'map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__Dict_530_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__Dict_530_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__Dict_530_0_23, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__Dict_530_0_24, 107, -1, G__defined_typename("map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::size_type"), 0, 1, 1, 1, 8, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__Dict_530_0_25, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__Dict_530_0_26, 117, G__get_linked_tagnum(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'string' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >", 15296, G__Dict_530_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR(void) {
   /* vector<tbeam::Track,allocator<tbeam::Track> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR));
   G__memfunc_setup("at",213,G__Dict_536_0_1, 117, G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack), G__defined_typename("vector<tbeam::Track,allocator<tbeam::Track> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<tbeam::Track,allocator<tbeam::Track> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("at",213,G__Dict_536_0_2, 117, G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack), G__defined_typename("vector<tbeam::Track,allocator<tbeam::Track> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<tbeam::Track,allocator<tbeam::Track> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__Dict_536_0_3, 117, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__Dict_536_0_4, 117, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__Dict_536_0_5, 117, G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgRcLcLiteratorgR), G__defined_typename("vector<tbeam::Track,allocator<tbeam::Track> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__Dict_536_0_6, 117, G__get_linked_tagnum(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgRcLcLiteratorgR), G__defined_typename("vector<tbeam::Track,allocator<tbeam::Track> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__Dict_536_0_7, 107, -1, G__defined_typename("vector<tbeam::Track,allocator<tbeam::Track> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__Dict_536_0_8, 107, -1, G__defined_typename("vector<tbeam::Track,allocator<tbeam::Track> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__Dict_536_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<tbeam::Track,allocator<tbeam::Track> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__Dict_536_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<tbeam::Track,allocator<tbeam::Track> >::size_type' 0 - sz u 'tbeam::Track' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__Dict_536_0_11, 107, -1, G__defined_typename("vector<tbeam::Track,allocator<tbeam::Track> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__Dict_536_0_12, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__Dict_536_0_13, 117, G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack), G__defined_typename("vector<tbeam::Track,allocator<tbeam::Track> >::reference"), 1, 1, 1, 1, 0, "k - 'vector<tbeam::Track,allocator<tbeam::Track> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__Dict_536_0_14, 117, G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack), G__defined_typename("vector<tbeam::Track,allocator<tbeam::Track> >::const_reference"), 1, 1, 1, 1, 8, "k - 'vector<tbeam::Track,allocator<tbeam::Track> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tbeam::Track,allocator<tbeam::Track> >",4216,G__Dict_536_0_15, 105, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tbeam::Track,allocator<tbeam::Track> >",4216,G__Dict_536_0_16, 105, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<tbeam::Track,allocator<tbeam::Track> >::size_type' 0 - n u 'tbeam::Track' - 11 'tbeam::Track()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tbeam::Track,allocator<tbeam::Track> >",4216,G__Dict_536_0_17, 105, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<tbeam::Track,allocator<tbeam::Track> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<tbeam::Track,allocator<tbeam::Track> >",4216,G__Dict_536_0_18, 105, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<tbeam::Track,allocator<tbeam::Track> >::iterator' 'vector<tbeam::Track,allocator<tbeam::Track> >::const_iterator' 10 - first u 'vector<tbeam::Track,allocator<tbeam::Track> >::iterator' 'vector<tbeam::Track,allocator<tbeam::Track> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__Dict_536_0_19, 117, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<tbeam::Track,allocator<tbeam::Track> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__Dict_536_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<tbeam::Track,allocator<tbeam::Track> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__Dict_536_0_21, 117, G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__Dict_536_0_22, 117, G__get_linked_tagnum(&G__DictLN_tbeamcLcLTrack), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__Dict_536_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'tbeam::Track' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__Dict_536_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<tbeam::Track,allocator<tbeam::Track> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_536_0_25, 117, G__get_linked_tagnum(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<tbeam::Track,allocator<tbeam::Track> >::iterator' - 0 - position u 'tbeam::Track' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_536_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<tbeam::Track,allocator<tbeam::Track> >::iterator' - 0 - position u 'vector<tbeam::Track,allocator<tbeam::Track> >::iterator' 'vector<tbeam::Track,allocator<tbeam::Track> >::const_iterator' 10 - first "
"u 'vector<tbeam::Track,allocator<tbeam::Track> >::iterator' 'vector<tbeam::Track,allocator<tbeam::Track> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__Dict_536_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<tbeam::Track,allocator<tbeam::Track> >::iterator' - 0 - position k - 'vector<tbeam::Track,allocator<tbeam::Track> >::size_type' 0 - n "
"u 'tbeam::Track' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__Dict_536_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_536_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<tbeam::Track,allocator<tbeam::Track> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__Dict_536_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<tbeam::Track,allocator<tbeam::Track> >::iterator' - 0 - first u 'vector<tbeam::Track,allocator<tbeam::Track> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__Dict_536_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<tbeam::Track,allocator<tbeam::Track> >", 4342, G__Dict_536_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__DictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__DictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR = { "vector<unsigned short,allocator<unsigned short> >" , 99 , -1 };
G__linked_taginfo G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiterator = { "vector<unsigned short,allocator<unsigned short> >::iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<unsigned short,allocator<unsigned short> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__DictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__DictLN_lesslEstringgR = { "less<string>" , 115 , -1 };
G__linked_taginfo G__DictLN_allocatorlEpairlEconstsPstringcOintgRsPgR = { "allocator<pair<const string,int> >" , 99 , -1 };
G__linked_taginfo G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR = { "map<string,int,less<string>,allocator<pair<const string,int> > >" , 99 , -1 };
G__linked_taginfo G__DictLN_pairlEstringcOintgR = { "pair<string,int>" , 115 , -1 };
G__linked_taginfo G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator = { "map<string,int,less<string>,allocator<pair<const string,int> > >::iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator = { "map<string,int,less<string>,allocator<pair<const string,int> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_tbeam = { "tbeam" , 110 , -1 };
G__linked_taginfo G__DictLN_tbeamcLcLcluster = { "tbeam::cluster" , 99 , -1 };
G__linked_taginfo G__DictLN_tbeamcLcLstub = { "tbeam::stub" , 99 , -1 };
G__linked_taginfo G__DictLN_tbeamcLcLcbc = { "tbeam::cbc" , 99 , -1 };
G__linked_taginfo G__DictLN_tbeamcLcLdutEvent = { "tbeam::dutEvent" , 99 , -1 };
G__linked_taginfo G__DictLN_vectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgR = { "vector<tbeam::cluster*,allocator<tbeam::cluster*> >" , 99 , -1 };
G__linked_taginfo G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<tbeam::cluster*,allocator<tbeam::cluster*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgR = { "allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > >" , 99 , -1 };
G__linked_taginfo G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR = { "map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >" , 99 , -1 };
G__linked_taginfo G__DictLN_pairlEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgR = { "pair<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > >" , 115 , -1 };
G__linked_taginfo G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLiterator = { "map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLreverse_iterator = { "map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_pairlEmaplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__DictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__DictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator = { "vector<int,allocator<int> >::iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgR = { "allocator<pair<const string,vector<int,allocator<int> > > >" , 99 , -1 };
G__linked_taginfo G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR = { "map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >" , 99 , -1 };
G__linked_taginfo G__DictLN_pairlEstringcOvectorlEintcOallocatorlEintgRsPgRsPgR = { "pair<string,vector<int,allocator<int> > >" , 115 , -1 };
G__linked_taginfo G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLiterator = { "map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLreverse_iterator = { "map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_pairlEmaplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR = { "vector<tbeam::stub*,allocator<tbeam::stub*> >" , 99 , -1 };
G__linked_taginfo G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgRcLcLiterator = { "vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<tbeam::stub*,allocator<tbeam::stub*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DictLN_tbeamcLcLcondEvent = { "tbeam::condEvent" , 99 , -1 };
G__linked_taginfo G__DictLN_vectorlEtbeamcLcLcbccOallocatorlEtbeamcLcLcbcgRsPgR = { "vector<tbeam::cbc,allocator<tbeam::cbc> >" , 99 , -1 };
G__linked_taginfo G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLcbccOallocatorlEtbeamcLcLcbcgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<tbeam::cbc,allocator<tbeam::cbc> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DictLN_tbeamcLcLTelescopeEvent = { "tbeam::TelescopeEvent" , 99 , -1 };
G__linked_taginfo G__DictLN_tbeamcLcLFeIFourEvent = { "tbeam::FeIFourEvent" , 99 , -1 };
G__linked_taginfo G__DictLN_tbeamcLcLTrack = { "tbeam::Track" , 99 , -1 };
G__linked_taginfo G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR = { "allocator<pair<const string,vector<double,allocator<double> > > >" , 99 , -1 };
G__linked_taginfo G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR = { "map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >" , 99 , -1 };
G__linked_taginfo G__DictLN_pairlEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgR = { "pair<string,vector<double,allocator<double> > >" , 115 , -1 };
G__linked_taginfo G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLiterator = { "map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLreverse_iterator = { "map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_pairlEmaplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR = { "vector<tbeam::cluster,allocator<tbeam::cluster> >" , 99 , -1 };
G__linked_taginfo G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcLcLiterator = { "vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<tbeam::cluster,allocator<tbeam::cluster> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgR = { "allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > >" , 99 , -1 };
G__linked_taginfo G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR = { "map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >" , 99 , -1 };
G__linked_taginfo G__DictLN_pairlEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgR = { "pair<string,vector<tbeam::cluster,allocator<tbeam::cluster> > >" , 115 , -1 };
G__linked_taginfo G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLiterator = { "map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLreverse_iterator = { "map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_pairlEmaplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR = { "vector<tbeam::stub,allocator<tbeam::stub> >" , 99 , -1 };
G__linked_taginfo G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgRcLcLiterator = { "vector<tbeam::stub,allocator<tbeam::stub> >::iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<tbeam::stub,allocator<tbeam::stub> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR = { "allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > >" , 99 , -1 };
G__linked_taginfo G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR = { "map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >" , 99 , -1 };
G__linked_taginfo G__DictLN_pairlEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR = { "pair<string,vector<unsigned short,allocator<unsigned short> > >" , 115 , -1 };
G__linked_taginfo G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLiterator = { "map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLreverse_iterator = { "map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_pairlEmaplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR = { "vector<tbeam::Track,allocator<tbeam::Track> >" , 99 , -1 };
G__linked_taginfo G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgRcLcLiterator = { "vector<tbeam::Track,allocator<tbeam::Track> >::iterator" , 99 , -1 };
G__linked_taginfo G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<tbeam::Track,allocator<tbeam::Track> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDict() {
  G__DictLN_TClass.tagnum = -1 ;
  G__DictLN_TBuffer.tagnum = -1 ;
  G__DictLN_TMemberInspector.tagnum = -1 ;
  G__DictLN_TObject.tagnum = -1 ;
  G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR.tagnum = -1 ;
  G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiterator.tagnum = -1 ;
  G__DictLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__DictLN_string.tagnum = -1 ;
  G__DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__DictLN_lesslEstringgR.tagnum = -1 ;
  G__DictLN_allocatorlEpairlEconstsPstringcOintgRsPgR.tagnum = -1 ;
  G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR.tagnum = -1 ;
  G__DictLN_pairlEstringcOintgR.tagnum = -1 ;
  G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__DictLN_tbeam.tagnum = -1 ;
  G__DictLN_tbeamcLcLcluster.tagnum = -1 ;
  G__DictLN_tbeamcLcLstub.tagnum = -1 ;
  G__DictLN_tbeamcLcLcbc.tagnum = -1 ;
  G__DictLN_tbeamcLcLdutEvent.tagnum = -1 ;
  G__DictLN_vectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgR.tagnum = -1 ;
  G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DictLN_pairlEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgR.tagnum = -1 ;
  G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__DictLN_pairlEmaplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__DictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__DictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator.tagnum = -1 ;
  G__DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DictLN_pairlEstringcOvectorlEintcOallocatorlEintgRsPgRsPgR.tagnum = -1 ;
  G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__DictLN_pairlEmaplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR.tagnum = -1 ;
  G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DictLN_tbeamcLcLcondEvent.tagnum = -1 ;
  G__DictLN_vectorlEtbeamcLcLcbccOallocatorlEtbeamcLcLcbcgRsPgR.tagnum = -1 ;
  G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLcbccOallocatorlEtbeamcLcLcbcgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DictLN_tbeamcLcLTelescopeEvent.tagnum = -1 ;
  G__DictLN_tbeamcLcLFeIFourEvent.tagnum = -1 ;
  G__DictLN_tbeamcLcLTrack.tagnum = -1 ;
  G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DictLN_pairlEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgR.tagnum = -1 ;
  G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__DictLN_pairlEmaplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR.tagnum = -1 ;
  G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcLcLiterator.tagnum = -1 ;
  G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgR.tagnum = -1 ;
  G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DictLN_pairlEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgR.tagnum = -1 ;
  G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__DictLN_pairlEmaplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR.tagnum = -1 ;
  G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgRcLcLiterator.tagnum = -1 ;
  G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__DictLN_pairlEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR.tagnum = -1 ;
  G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__DictLN_pairlEmaplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR.tagnum = -1 ;
  G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgRcLcLiterator.tagnum = -1 ;
  G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__DictLN_TClass);
   G__get_linked_tagnum_fwd(&G__DictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__DictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__DictLN_TObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),0,-1,298752,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__DictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DictLN_reverse_iteratorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_string);
   G__get_linked_tagnum_fwd(&G__DictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__DictLN_lesslEstringgR);
   G__get_linked_tagnum_fwd(&G__DictLN_allocatorlEpairlEconstsPstringcOintgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1,298752,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__DictLN_pairlEstringcOintgR);
   G__get_linked_tagnum_fwd(&G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__DictLN_tbeam);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_tbeamcLcLcluster),sizeof(tbeam::cluster),-1,292096,(char*)NULL,G__setup_memvartbeamcLcLcluster,G__setup_memfunctbeamcLcLcluster);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_tbeamcLcLstub),sizeof(tbeam::stub),-1,291584,(char*)NULL,G__setup_memvartbeamcLcLstub,G__setup_memfunctbeamcLcLstub);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_tbeamcLcLcbc),sizeof(tbeam::cbc),-1,291072,(char*)NULL,G__setup_memvartbeamcLcLcbc,G__setup_memfunctbeamcLcLcbc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_tbeamcLcLdutEvent),sizeof(tbeam::dutEvent),-1,292608,(char*)NULL,G__setup_memvartbeamcLcLdutEvent,G__setup_memfunctbeamcLcLdutEvent);
   G__get_linked_tagnum_fwd(&G__DictLN_vectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR),sizeof(map<string,vector<tbeam::cluster*,allocator<tbeam::cluster*> >,less<string>,allocator<pair<const string,vector<tbeam::cluster*,allocator<tbeam::cluster*> > > > >),-1,298752,(char*)NULL,G__setup_memvarmaplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR,G__setup_memfuncmaplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_pairlEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__DictLN_pairlEmaplEstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustermUcOallocatorlEtbeamcLcLclustermUgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_vectorlEintcOallocatorlEintgRsPgR),sizeof(vector<int,allocator<int> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEintcOallocatorlEintgRsPgR,G__setup_memfuncvectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_vectorlEintcOallocatorlEintgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),sizeof(map<string,vector<int,allocator<int> >,less<string>,allocator<pair<const string,vector<int,allocator<int> > > > >),-1,298752,(char*)NULL,G__setup_memvarmaplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR,G__setup_memfuncmaplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_pairlEstringcOvectorlEintcOallocatorlEintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DictLN_maplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__DictLN_pairlEmaplEstringcOvectorlEintcOallocatorlEintgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR),sizeof(vector<tbeam::stub*,allocator<tbeam::stub*> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR,G__setup_memfuncvectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_vectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLstubmUcOallocatorlEtbeamcLcLstubmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_tbeamcLcLcondEvent),sizeof(tbeam::condEvent),-1,292096,(char*)NULL,G__setup_memvartbeamcLcLcondEvent,G__setup_memfunctbeamcLcLcondEvent);
   G__get_linked_tagnum_fwd(&G__DictLN_vectorlEtbeamcLcLcbccOallocatorlEtbeamcLcLcbcgRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLcbccOallocatorlEtbeamcLcLcbcgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_tbeamcLcLTelescopeEvent),sizeof(tbeam::TelescopeEvent),-1,292608,(char*)NULL,G__setup_memvartbeamcLcLTelescopeEvent,G__setup_memfunctbeamcLcLTelescopeEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_tbeamcLcLFeIFourEvent),sizeof(tbeam::FeIFourEvent),-1,292608,(char*)NULL,G__setup_memvartbeamcLcLFeIFourEvent,G__setup_memfunctbeamcLcLFeIFourEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_tbeamcLcLTrack),sizeof(tbeam::Track),-1,325376,(char*)NULL,G__setup_memvartbeamcLcLTrack,G__setup_memfunctbeamcLcLTrack);
   G__get_linked_tagnum_fwd(&G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR),sizeof(map<string,vector<double,allocator<double> >,less<string>,allocator<pair<const string,vector<double,allocator<double> > > > >),-1,298752,(char*)NULL,G__setup_memvarmaplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR,G__setup_memfuncmaplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_pairlEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DictLN_maplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__DictLN_pairlEmaplEstringcOvectorlEdoublecOallocatorlEdoublegRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEdoublecOallocatorlEdoublegRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR),sizeof(vector<tbeam::cluster,allocator<tbeam::cluster> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR,G__setup_memfuncvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_vectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR),sizeof(map<string,vector<tbeam::cluster,allocator<tbeam::cluster> >,less<string>,allocator<pair<const string,vector<tbeam::cluster,allocator<tbeam::cluster> > > > >),-1,298752,(char*)NULL,G__setup_memvarmaplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR,G__setup_memfuncmaplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_pairlEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DictLN_maplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__DictLN_pairlEmaplEstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEtbeamcLcLclustercOallocatorlEtbeamcLcLclustergRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR),sizeof(vector<tbeam::stub,allocator<tbeam::stub> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR,G__setup_memfuncvectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_vectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLstubcOallocatorlEtbeamcLcLstubgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DictLN_allocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR),sizeof(map<string,vector<unsigned short,allocator<unsigned short> >,less<string>,allocator<pair<const string,vector<unsigned short,allocator<unsigned short> > > > >),-1,298752,(char*)NULL,G__setup_memvarmaplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR,G__setup_memfuncmaplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_pairlEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DictLN_maplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__DictLN_pairlEmaplEstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRsPgRcLcLiteratorcOboolgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR),sizeof(vector<tbeam::Track,allocator<tbeam::Track> >),-1,298752,(char*)NULL,G__setup_memvarvectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR,G__setup_memfuncvectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgR);
   G__get_linked_tagnum_fwd(&G__DictLN_vectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__DictLN_reverse_iteratorlEvectorlEtbeamcLcLTrackcOallocatorlEtbeamcLcLTrackgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupDict()");
  G__set_cpp_environmentDict();
  G__cpp_setup_tagtableDict();

  G__cpp_setup_inheritanceDict();

  G__cpp_setup_typetableDict();

  G__cpp_setup_memvarDict();

  G__cpp_setup_memfuncDict();
  G__cpp_setup_globalDict();
  G__cpp_setup_funcDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDict();
  return;
}
class G__cpp_setup_initDict {
  public:
    G__cpp_setup_initDict() { G__add_setup_func("Dict",(G__incsetup)(&G__cpp_setupDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDict() { G__remove_setup_func("Dict"); }
};
G__cpp_setup_initDict G__cpp_setup_initializerDict;

